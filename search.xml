<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022“杭电杯”中国大学生算法设计超级联赛（5）</title>
      <link href="/2022/08/02/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%885%EF%BC%89/"/>
      <url>/2022/08/02/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这场多校幸亏有数学大手子队友切了道多项式题，$rank$++</p><p>然后记录一下我赛中写的几题。</p><h1>1003-Slipper</h1><h2 id="题意">题意</h2><p>给出一颗根节点为$1$的树，每条边都有$w_i$的费用。</p><p>现在给你两个整数$k,p$，代表任意$u,v$只要$|depth_u-depth_v|=k$，那么就可以花费$p$的代价从$u$走到$v$或者从$v$走到$u$。</p><p>最后给你两个整数$s,t$求从$s$走到$t$的花费的最小代价是多少</p><h2 id="思路">思路</h2><p>我们考虑对每个深度建立一个虚点，我们设这个虚点为$d_i$，然后树上每个节点对应深度的虚点向该节点连边，</p><p>该节点向深度为$depth_i+k$以及$depth_i-k$对应的虚点连边，最后跑$s \rightarrow r$的最短路。</p><p>但是没想到这题卡$vector$，必须用链式前向星连边才行。</p><p><img src="/2022/08/02/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%885%EF%BC%89/png1.png" alt="png1"></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>, MOD = <span class="number">99824435</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, p, s, t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">&#125; G[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">int</span> dep[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    LL v, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; o.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">LL dis[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> head1[N], ver1[N], Next[N], tot1;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    ver1[++ tot1] = v;</span><br><span class="line">    Next[tot1] = head1[u];</span><br><span class="line">    head1[u] = tot1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> head2[N * <span class="number">3</span>], ver2[N * <span class="number">3</span>], Next2[N * <span class="number">3</span>], val[N * <span class="number">3</span>], tot2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    ver2[++ tot2] = v;</span><br><span class="line">    val[tot2] = w;</span><br><span class="line">    Next[tot2] = head2[u];</span><br><span class="line">    head2[u] = tot2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    dep[x] = dep[p] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head1[x]; i; i = Next[i]) &#123;</span><br><span class="line">        <span class="type">int</span> y = ver1[i];</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt; Node &gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> st, <span class="type">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n * <span class="number">2</span>; ++ i) &#123;</span><br><span class="line">        dis[i] = <span class="number">1e14</span>;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;st, dis[st] = <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node p = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[p.v]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[p.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head2[p.v]; i; i = Next[i]) &#123;</span><br><span class="line">            LL v = ver2[i], w = val[i];</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; dis[v] &gt; dis[p.v] + w) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;v, dis[v] = dis[p.v] + w&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= tot1; ++ i) &#123;</span><br><span class="line">        head1[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= tot2; ++ i) &#123;</span><br><span class="line">        head2[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tot1 = tot2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;G[i].u, &amp;G[i].v, &amp;G[i].w);</span><br><span class="line">        <span class="built_in">add_edge1</span>(G[i].u, G[i].v);</span><br><span class="line">        <span class="built_in">add_edge1</span>(G[i].v, G[i].u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u = G[i].u, v = G[i].v, w = G[i].w;</span><br><span class="line">        <span class="built_in">add_edge2</span>(u, v, w);</span><br><span class="line">        <span class="built_in">add_edge2</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;k, &amp;p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; ++ i)&#123;</span><br><span class="line">        <span class="built_in">add_edge2</span>(dep[i] + n, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l = dep[i] - k;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">add_edge2</span>(i, l + n, p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> r = dep[i] + k;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= n)&#123;</span><br><span class="line">            <span class="built_in">add_edge2</span>(i, r + n, p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(s, t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dis[t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1012-Buy Figurines</h1><h2 id="题意-2">题意</h2><p>$n$个人，$m$条排队通道，每个人都要来商场购物，给出每个人到达时间 $s_i$ 和购物所需的时间 $t_i$。</p><p>现有如下规则：</p><ul><li>当第$i$个人到达商场时，他会选择当前排队人数最少的通道，若这样的通道不只一个，那么他会选择队伍编号最小的</li><li>若当前时刻有人离开，那么他会等所有当前时刻的人离开后，再去排队</li></ul><p>求所有人都完成购物的最少时间</p><h2 id="思路-2">思路</h2><p>我们考虑维护当前时刻每个队伍的人数以及排了队的人的离开时间和他所属的排队通道的标号，当该时刻有人来购物时，我们把所有排了队的人里结束时间小于等于该时刻的人给“丢掉”，并且实时更新“丢掉”的人所属排队通道正在排队的人数。最后输出最大离开时间即可。</p><h2 id="代码-2">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> cnt[N], ed_time[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt; pair&lt; LL, LL &gt; &gt; a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> s, t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        a.<span class="built_in">push_back</span>(&#123;s, t&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        cnt[i] = ed_time[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    multiset&lt; pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; &gt; st;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    multiset&lt; pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; &gt; que;</span><br><span class="line">    multiset&lt; pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; &gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> s = a[i].first, t = a[i].second;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; m) &#123;</span><br><span class="line">            ++ num;</span><br><span class="line">            cnt[num] = <span class="number">1</span>;</span><br><span class="line">            ed_time[num] = s + t;</span><br><span class="line">            st.<span class="built_in">insert</span>(&#123;<span class="number">1</span>, num&#125;);</span><br><span class="line">            que.<span class="built_in">insert</span>(&#123;s + t, num&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; que.<span class="built_in">begin</span>()-&gt;first &lt;= s) &#123;</span><br><span class="line">                <span class="type">int</span> pos = que.<span class="built_in">begin</span>()-&gt;second;</span><br><span class="line">                st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(&#123;cnt[pos], pos&#125;));</span><br><span class="line">                -- cnt[pos];</span><br><span class="line">                st.<span class="built_in">insert</span>(&#123;cnt[pos], pos&#125;);</span><br><span class="line">                que.<span class="built_in">erase</span>(que.<span class="built_in">begin</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> CNT = st.<span class="built_in">begin</span>()-&gt;first, POS = st.<span class="built_in">begin</span>()-&gt;second;</span><br><span class="line">            st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">            ++ cnt[POS];</span><br><span class="line">            ed_time[POS] = <span class="built_in">max</span>(ed_time[POS], s) + t;</span><br><span class="line">            st.<span class="built_in">insert</span>(&#123;cnt[POS], POS&#125;);</span><br><span class="line">            que.<span class="built_in">insert</span>(&#123;ed_time[POS], POS&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; *<span class="built_in">max_element</span>(ed_time + <span class="number">1</span>, ed_time + m + <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4287 [SHOI2011]双倍回文</title>
      <link href="/2022/08/02/P4287-SHOI2011-%E5%8F%8C%E5%80%8D%E5%9B%9E%E6%96%87/"/>
      <url>/2022/08/02/P4287-SHOI2011-%E5%8F%8C%E5%80%8D%E5%9B%9E%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://www.luogu.com.cn/problem/P4287">SHOI2011]双倍回文 - 洛谷</a></p><h1>前置知识： 回文自动机</h1><p>有关回文自动机的介绍以及求法，这里推荐三篇博客</p><p><a href="https://oi.wiki/string/pam/">回文树 - OI Wiki</a></p><p><a href="https://www.cnblogs.com/bztMinamoto/p/9630617.html">回文自动机学习笔记 - bztMinamoto - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/Clove_unique/article/details/53750322">Manacher 回文自动机 学习笔记_Clove_unique的博客-CSDN博客_回文自动机</a></p><p>这几个博客都讲解得很好，结合起来食用效果更佳！</p><p>如果觉得太抽象的话，可以在纸上画几个回文自动机，理解每个操作的原理。</p><h1>题意</h1><p>一个长度为$n$的字符串$S$，在$S$的子串中寻找形如$ss$（$s$为回文串）的最长$ss$长度</p><h1>思路</h1><p>首先建立回文自动机，在求$fail$指针时，我们维护一个$go$指针，指向长度不大于当前回文串一半的最长回文后缀的节点。</p><p>我们考虑每次插入字符$c$的过程。</p><p>当我们新建一个节点$x$时，若该节点的父节点的长度已经小于等于该节点长度的一半，我们直接让$go_x $指向父节点，即$fail_x$。</p><p>否则我们从$x$的父节点的$go$指针不断向上跳，直到当前节点两端能拓展字符$c$并且拓展后长度不大于$x$的长度，那么$go_x$指向当前节点的儿子为$c$的子节点。</p><p>现在我们枚举回文自动机上的每个节点，若当前节点的长度为$4$的倍数且它的$go$指针指向的节点长度刚好为当前节点长度的一半，那么我们对该长度取$\max$，最后输出$\max$即可。</p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Palindromic_Automaton</span> &#123;</span><br><span class="line">    <span class="type">int</span> s[N], top; <span class="comment">// 原串</span></span><br><span class="line">    <span class="type">int</span> ch[N][<span class="number">26</span>], fail[N], len[N], tot, last;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Palindromic_Automaton</span>() &#123;</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">-114514</span>;</span><br><span class="line">        tot = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">New</span>(<span class="number">0</span>); <span class="comment">// 偶根</span></span><br><span class="line">        <span class="built_in">New</span>(<span class="number">-1</span>); <span class="comment">// 奇根</span></span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">New</span><span class="params">(<span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">        len[++ tot] = length;</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Get_Fail</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="comment">// 找最长的回文后缀</span></span><br><span class="line">        <span class="keyword">while</span> (s[top - len[x] - <span class="number">1</span>] != s[top]) &#123;</span><br><span class="line">            x = fail[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> go[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Extend</span><span class="params">(<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        s[++ top] = c;</span><br><span class="line">        <span class="type">int</span> now = <span class="built_in">Get_Fail</span>(last);</span><br><span class="line">        <span class="keyword">if</span> (!ch[now][c]) &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">New</span>(len[now] + <span class="number">2</span>);</span><br><span class="line">            fail[x] = ch[<span class="built_in">Get_Fail</span>(fail[now])][c];</span><br><span class="line">            ch[now][c] = x;</span><br><span class="line">            <span class="keyword">if</span> (len[fail[x]] &lt;= len[x] / <span class="number">2</span>) &#123;</span><br><span class="line">                go[x] = fail[x];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> y = go[now];</span><br><span class="line">                <span class="keyword">while</span> (len[y] + <span class="number">2</span> &gt; len[x] / <span class="number">2</span> || s[top - len[y] - <span class="number">1</span>] != s[top]) &#123;</span><br><span class="line">                    y = fail[y];</span><br><span class="line">                &#125;</span><br><span class="line">                go[x] = ch[y][c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = ch[now][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= tot; ++ i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (len[i] % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; len[i] == len[go[i]] * <span class="number">2</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, len[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pam;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x : s) &#123;</span><br><span class="line">        pam.<span class="built_in">Extend</span>(x - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pam.<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蔚来杯2022牛客暑期多校训练营1 F Cut</title>
      <link href="/2022/08/01/%E8%94%9A%E6%9D%A5%E6%9D%AF2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51-F-Cut/"/>
      <url>/2022/08/01/%E8%94%9A%E6%9D%A5%E6%9D%AF2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51-F-Cut/</url>
      
        <content type="html"><![CDATA[<p>数据结构大🐂题，很考验码力，虽然赛中不会做，但是把题解看懂不也是${\color{Red}win}?$</p><p>题目链接：<a href="https://ac.nowcoder.com/acm/contest/33186/F">Cut</a></p><h1>题意</h1><p>长度为$n$的序列$a_i$，$m$次操作，操作分三种</p><ul><li>将 $a_l,a_{l+1},\cdots,a_r$ 升序排列</li><li>将 $a_l,a_{l+1},\cdots,a_r$ 降序排列</li><li>求出下标在$[l,r]$内的最长奇偶交替子序列的长度</li></ul><h1>思路</h1><p>看到区间排序，我们首先想到了这一道题<a href="https://www.luogu.com.cn/problem/P2824">P2824 [HEOI2016/TJOI2016]排序</a>)，这题有两个做法，离线二分+线段树以及动态开点线段树+类似<a href="https://oi.wiki/ds/odt/">珂朵莉树</a>的$set$操作。<img src="/2022/08/01/%E8%94%9A%E6%9D%A5%E6%9D%AF2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51-F-Cut%E9%A2%98%E8%A7%A3/pic3.png" alt="图片1"></p><p>而这一题显然不能离线做，所以我们考虑用线段树分裂来维护区间排序操作。可以参考这位大佬的博客，<a href="https://www.luogu.com.cn/blog/flashblog/solution-p2824">[HEOI2016/TJOI2016]排序</a>)。</p><p>然后我们怎么维护操作三的最长奇偶交替子序列的长度呢，如果单看操作三，我们可以用线段树维护区间合并，毕竟线段树很擅长区间信息合并这一操作，我们用$f_{i,j}$代表该区间以$i$开头，$j$结尾的最长奇偶交替序列长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> Info <span class="keyword">operator</span> + (<span class="type">const</span> Info &amp;l, <span class="type">const</span> Info &amp;r) &#123;</span><br><span class="line">    Info rt;</span><br><span class="line">    rt.f[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">0</span>][<span class="number">0</span>], r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">0</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">0</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">    rt.f[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">1</span>][<span class="number">1</span>], r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">1</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">1</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">    rt.f[<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">1</span>][<span class="number">0</span>], r.f[<span class="number">1</span>][<span class="number">0</span>], l.f[<span class="number">1</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">1</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">    rt.f[<span class="number">0</span>][<span class="number">1</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">0</span>][<span class="number">1</span>], r.f[<span class="number">0</span>][<span class="number">1</span>], l.f[<span class="number">0</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">0</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们思考如何将区间排序和操作三的查询结合在一起</p><p><img src="/2022/08/01/%E8%94%9A%E6%9D%A5%E6%9D%AF2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51-F-Cut%E9%A2%98%E8%A7%A3/pic2.png" alt="图片2"></p><p>这里我和题解不同，我是维护的右端点，但是结果是一样的，我们考虑将一段分裂的区间的信息全压缩到该区间的右端点上，每次分裂、合并时我们都用那颗维护操作三的线段树更新新区间右端点的$f_{i,j}$，查询时我们$Split(l-1),Split({r})$将$l-1,r$分裂成右端点，然后查询时我们只需要查询$[l,r]$里的右端点信息合并之后的最大值<br>$$<br>ans = \max (f_{0,0},f_{0,1},f_{1,0},f_{1,1})<br>$$</p><h2 id="代码-14">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">Info</span>() &#123;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = f[<span class="number">1</span>][<span class="number">1</span>] = f[<span class="number">0</span>][<span class="number">1</span>] = f[<span class="number">1</span>][<span class="number">0</span>] = -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Info <span class="keyword">operator</span> + (<span class="type">const</span> Info &amp;l, <span class="type">const</span> Info &amp;r) &#123;</span><br><span class="line">        Info rt;</span><br><span class="line">        rt.f[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">0</span>][<span class="number">0</span>], r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">0</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">0</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">        rt.f[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">1</span>][<span class="number">1</span>], r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">1</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">1</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">        rt.f[<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">1</span>][<span class="number">0</span>], r.f[<span class="number">1</span>][<span class="number">0</span>], l.f[<span class="number">1</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">1</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">        rt.f[<span class="number">0</span>][<span class="number">1</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">0</span>][<span class="number">1</span>], r.f[<span class="number">0</span>][<span class="number">1</span>], l.f[<span class="number">0</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">0</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> tot, ls[N &lt;&lt; <span class="number">6</span>], rs[N &lt;&lt; <span class="number">6</span>], cnt[N &lt;&lt; <span class="number">6</span>];</span><br><span class="line">Info inf[N &lt;&lt; <span class="number">6</span>];</span><br><span class="line">set&lt; <span class="type">int</span> &gt;::iterator it;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    cnt[x] = cnt[ls[x]] + cnt[rs[x]];</span><br><span class="line">    inf[x] = inf[ls[x]] + inf[rs[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    x = ++ tot;</span><br><span class="line">    cnt[x] = <span class="number">1</span>;</span><br><span class="line">    inf[x].f[p &amp; <span class="number">1</span>][p &amp; <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(ls[x], l, mid, p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">insert</span>(rs[x], mid + <span class="number">1</span>, r, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) &#123;</span><br><span class="line">        x += y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge</span>(ls[x], ls[y], l, mid);</span><br><span class="line">    <span class="built_in">merge</span>(rs[x], rs[y], mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 前k个给x,其余给y</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        x = y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123; <span class="comment">// 断边</span></span><br><span class="line">        <span class="keyword">if</span> (k) &#123;</span><br><span class="line">            x = p;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y = p;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt[ls[p]] &gt;= k) &#123; <span class="comment">// 右儿子给y, 递归左儿子</span></span><br><span class="line">        y = p;</span><br><span class="line">        x = ++ tot;</span><br><span class="line">        <span class="built_in">split</span>(ls[p], ls[x], ls[y], l, mid, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 左儿子给x, 递归右儿子</span></span><br><span class="line">        x = p;</span><br><span class="line">        y = ++ tot;</span><br><span class="line">        <span class="built_in">split</span>(rs[p], rs[x], rs[y], mid + <span class="number">1</span>, r, k - cnt[ls[p]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(x);</span><br><span class="line">    <span class="built_in">push_up</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">Info seg[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, q, a[N], col[N], rt[N];</span><br><span class="line">set&lt; <span class="type">int</span> &gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        seg[x] = inf[rt[l]];</span><br><span class="line">        <span class="keyword">if</span> (col[l]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(seg[x].f[<span class="number">0</span>][<span class="number">1</span>], seg[x].f[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(x &lt;&lt; <span class="number">1</span>, l, mid, p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">update</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, p);</span><br><span class="line">    &#125;</span><br><span class="line">    seg[x] = seg[x &lt;&lt; <span class="number">1</span>] + seg[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Info <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt; qr || ql &gt; r || qr &lt; l) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        <span class="keyword">return</span> seg[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, l, mid, ql, qr) + <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    it = s.<span class="built_in">lower_bound</span>(p);</span><br><span class="line">    <span class="keyword">if</span> (*it == p) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> r = *it, l = *<span class="built_in">prev</span>(it) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (col[r]) &#123;</span><br><span class="line">        <span class="built_in">split</span>(rt[r], rt[r], rt[p], <span class="number">1</span>, n, r - p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">split</span>(rt[r], rt[p], rt[r], <span class="number">1</span>, n, p - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    col[p] = col[r];</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, p);</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, r);</span><br><span class="line">    s.<span class="built_in">insert</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(l - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">split</span>(r);</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = s.<span class="built_in">lower_bound</span>(l); *it &lt;= r;) &#123;</span><br><span class="line">        <span class="built_in">merge</span>(x, rt[*it], <span class="number">1</span>, n);</span><br><span class="line">        rt[*it] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, *it);</span><br><span class="line">        set&lt; <span class="type">int</span> &gt;::iterator IT = it;</span><br><span class="line">        ++ it;</span><br><span class="line">        s.<span class="built_in">erase</span>(IT);</span><br><span class="line">    &#125;</span><br><span class="line">    rt[r] = x;</span><br><span class="line">    col[r] = op;</span><br><span class="line">    s.<span class="built_in">insert</span>(r);</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        s.<span class="built_in">insert</span>(i);</span><br><span class="line">        <span class="built_in">insert</span>(rt[i], <span class="number">1</span>, n, a[i]);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        -- op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">split</span>(l - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">split</span>(r);</span><br><span class="line">            Info k = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">            cout &lt;&lt; <span class="built_in">max</span>(&#123;k.f[<span class="number">0</span>][<span class="number">0</span>], k.f[<span class="number">0</span>][<span class="number">1</span>], k.f[<span class="number">1</span>][<span class="number">0</span>], k.f[<span class="number">1</span>][<span class="number">1</span>]&#125;) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Sort</span>(l, r, op);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022牛客多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 261个人题解</title>
      <link href="/2022/08/01/AtCoder-Beginner-Contest-261%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/08/01/AtCoder-Beginner-Contest-261%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>A - Intersection</h1><h2 id="题意-3">题意</h2><p>给出两条线段，求交集长度</p><h2 id="题解">题解</h2><p>暴力</p><h2 id="代码-3">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">    cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">a</span><span class="params">(<span class="number">101</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l1; i &lt;= r1; ++ i) &#123;</span><br><span class="line">        a[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l2; i &lt;= r2; ++ i) &#123;</span><br><span class="line">        ans += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans) -- ans;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>B - Tournament Result</h1><h2 id="题意-4">题意</h2><p>一个二维矩阵，$A_{i,j}$为<code>W</code>则$i$击败$j$，为<code>L</code>则$i$败给$j$，为<code>D</code>则$i$和$j$打成平局</p><p>求是否冲突</p><blockquote><p>The table is said to be contradictory when some of the following holds:</p><ul><li>There is a pair (<em>i</em>,<em>j</em>) such that Player <em>i</em> beat Player <em>j</em>, but Player <em>j</em> did not lose to Player <em>i</em>;</li><li>There is a pair (<em>i</em>,<em>j</em>) such that Player <em>i</em> lost to Player <em>j</em>, but Player <em>j</em> did not beat Player <em>i</em>;</li><li>There is a pair (<em>i</em>,<em>j</em>) such that Player <em>i</em> drew with Player <em>j</em>, but Player <em>j</em> did not draw with Player <em>i</em>.</li></ul></blockquote><h2 id="题解-2">题解</h2><p>模拟</p><h2 id="代码-4">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1005</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s[N];</span><br><span class="line"><span class="type">int</span> dis[N][N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> safe = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;D&#x27;</span> &amp;&amp; s[j][i] != <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">                safe = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;W&#x27;</span> &amp;&amp; s[j][i] != <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                safe = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; s[j][i] != <span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">                safe = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (safe ? <span class="string">&quot;correct&quot;</span> : <span class="string">&quot;incorrect&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>C - NewFolder(1)</h1><h2 id="题意-5">题意</h2><p>给出<code>n</code>个字符串，要求以 $s_i+(\sum_{j=1}^{i-1}s_j==s[i])$ 的形式输出 <code>n</code> 个字符串</p><h2 id="题解-3">题解</h2><p>模拟</p><h2 id="代码-5">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt; string, <span class="type">int</span> &gt; cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[s[i]]) &#123;</span><br><span class="line">            cout &lt;&lt; s[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; s[i] + <span class="string">&#x27;(&#x27;</span> + <span class="built_in">to_string</span>(cnt[s[i]]) + <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ cnt[s[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>D - Flipping and Bonus</h1><h2 id="题意-6">题意</h2><p><code>Takahashi</code>会投掷$n$次硬币，若第$i$次硬币为正面，则他会获得$X_i$元的奖励，同时给出$m$个附加奖励，当他每次连续投掷正面的次数为$C_i$时他会额外获得$Y_i$元的奖励，求<code>Takahashi</code>能获得的最大钱数。</p><h2 id="题解-4">题解</h2><p>我们定义$dp_{i,j}$为投掷第$i$次硬币后，连续正面次数为$j$的最大收益</p><ul><li><p>若第$i$次投掷的是正面</p><p>$dp_{i,j}=dp_{i-1,j-1}+X_i$</p></li><li><p>若第$i$次投掷的是反面，那么连续正面次数重置为<code>0</code></p><p>$dp_{i,0}=\max(dp_{i,0},dp_{i-1,j})$</p></li><li><p>接下来考虑额外奖励</p><p>$dp_{i,C_j}=\max\left( dp_{i,C_j},dp_{i-1,C_j-1+Y_j+X_i} \right)$</p></li></ul><h2 id="代码-6">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5005</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, x[N], c[N], y[N];</span><br><span class="line">LL dp[N][N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; c[i] &gt;&gt; y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; ++ j) &#123;</span><br><span class="line">            dp[i][j + <span class="number">1</span>] = dp[i - <span class="number">1</span>][j] + x[i];</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i][<span class="number">0</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[j] &lt;= i) &#123;</span><br><span class="line">                dp[i][c[j]] = <span class="built_in">max</span>(dp[i][c[j]], dp[i - <span class="number">1</span>][c[j] - <span class="number">1</span>] + y[j] + x[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; ++ j) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>E - Many Operations</h1><h2 id="题意-7">题意</h2><p>我们有一个初值$X$，以及$n$个操作$op, A_i$</p><ul><li>若$op=1$ ，则令 $X=X &amp; A_i$</li><li>若$op=2$ ，则令 $X=X|A_i$</li><li>若$op=3$ ，则令 $X=X\bigoplus A_i$</li></ul><p>我们令初值$X$进行了前$i$次操作后的值为$Y_i$，输出$Y_i(1 \leq i \leq n)$</p><h2 id="题解-5">题解</h2><p>初一看，感觉是个很厉害的题，细想后发现可以对每一位分别考虑。</p><p>分别计算初始值每一位为$0$ 或 $1$，进行$i$次运算后的值，第$i$ 次的初始值为 $Y_{i-1}$ ，对 $Y_{i-1}$的每一位统计即可</p><h2 id="代码-7">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, C;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; C;</span><br><span class="line">    <span class="type">int</span> X = (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) - <span class="number">1</span>, Y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> op, x;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            X &amp;= x;</span><br><span class="line">            Y &amp;= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            X |= x;</span><br><span class="line">            Y |= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            X ^= x;</span><br><span class="line">            Y ^= x;</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (C &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                ans |= (X &gt;&gt; j &amp; <span class="number">1</span>) &lt;&lt; j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans |= (Y &gt;&gt; j &amp; <span class="number">1</span>) &lt;&lt; j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (C = ans) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>F - Sorting Color Balls</h1><h2 id="题意-8">题意</h2><p>给定$n$个元素，每个元素有一个值和一个颜色，每次操作可以交换相邻的两个元素，若这两个元素颜色不同，则需要消耗一点$cost$,询问通过操作将这$n$个元素按非递减排列所需要的最小$cost$</p><h2 id="题解-6">题解</h2><p>首先不考虑颜色，其代价显然是数组的逆序对个数</p><p>现在加上颜色的限制，其代价就是总的逆序对个数减去同种颜色之间逆序对的个数，维护这个即可。</p><p>这里我用了非树状数组的方法来求同种颜色之间逆序对的个数，从后往前遍历，我们每次把$X_i$顺序插入$C_i$对应的数组，询问时我们查询当前的$X_i$位于$C_i$对应的数组第几个即可，$j&gt;i$且$X_j&lt;X_i$符合逆序对定义嘛</p><h2 id="代码-8">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, c[N], x[N];</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; col[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FenWick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; c;</span><br><span class="line">    <span class="built_in">FenWick</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">c</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            c[i] += d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(l, d);</span><br><span class="line">        <span class="built_in">add</span>(r + <span class="number">1</span>, -d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i; i -= i &amp; -i) &#123;</span><br><span class="line">            sum += c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get</span>(r) - <span class="built_in">get</span>(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function">FenWick <span class="title">k</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; -- i) &#123;</span><br><span class="line">        ans += k.<span class="built_in">get</span>(x[i] - <span class="number">1</span>);</span><br><span class="line">        k.<span class="built_in">add</span>(x[i], <span class="number">1</span>);</span><br><span class="line">        ans -= <span class="built_in">upper_bound</span>(col[c[i]].<span class="built_in">begin</span>(), col[c[i]].<span class="built_in">end</span>(), x[i] - <span class="number">1</span>) - col[c[i]].<span class="built_in">begin</span>();</span><br><span class="line">        col[c[i]].<span class="built_in">insert</span>(<span class="built_in">upper_bound</span>(<span class="built_in">begin</span>(col[c[i]]), <span class="built_in">end</span>(col[c[i]]), x[i]), x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> atcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 262个人题解</title>
      <link href="/2022/07/31/AtCoder-Beginner-Contest-262%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/07/31/AtCoder-Beginner-Contest-262%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>A - World Cup</h1><h2 id="题意-9">题意</h2><p>给你一个数$x$，询问下一个$ \mod 4 \equiv 2$的数是多少</p><h2 id="题解-7">题解</h2><p>直接模拟即可</p><h2 id="代码-9">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n % <span class="number">4</span> != <span class="number">2</span>) ++ n;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>B - Triangle (Easier)</h1><h2 id="题意-10">题意</h2><p>给你一张$n$个点，$m$条边的无向图，询问形如$a &lt; b &lt; c$且$a,b,c$之间都有连边的$(a,b,c)$三元组个数</p><h2 id="题解-8">题解</h2><p>注意到$n \leq 100$，直接暴力枚举即可</p><h2 id="代码-10">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt; vector&lt; <span class="type">int</span> &gt; &gt; <span class="built_in">d</span>(<span class="number">105</span>, <span class="built_in">vector</span>&lt; <span class="type">int</span> &gt; (<span class="number">105</span>));</span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        d[u][v] = d[v][u] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++ j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>; k &lt;= n; ++ k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[i][j] &amp;&amp; d[j][k] &amp;&amp; d[i][k]) &#123;</span><br><span class="line">                    ++ ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>C - Min Max Pair</h1><h2 id="题意-11">题意</h2><p>一个长度为$n$的序列，且$1 \leq a_i \leq n(1 \leq i \leq n)$</p><p>求出满足$i &lt; j$且$\min (a_i,a_j)=i, \max (a_i,a_j)=j$的二元组$(i,j)$个数</p><h2 id="题解-9">题解</h2><p>我们对每一个$a_i$进行枚举</p><ul><li><p>首先分析$a_i=i$的情况</p><p>答案即为$a_j=j(i+1 \leq j \leq n)$的个数</p></li><li><p>再来分析$a_i \neq i$的情况</p><p>答案即为$a_i=j$且$a_j=i$的个数</p></li></ul><p>最后将答案加起来即可</p><h2 id="代码-11">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">cnt</span><span class="params">(n)</span>, <span class="title">suf</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        -- a[i];</span><br><span class="line">        ++ cnt[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">    suf[n - <span class="number">1</span>] = a[n - <span class="number">1</span>] == n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        suf[i] = suf[i + <span class="number">1</span>] + (a[i] == i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == i &amp;&amp; i + <span class="number">1</span> &lt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">            ans1 += suf[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != i) &#123;</span><br><span class="line">            ans2 += a[a[i]] == i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans1 + ans2 / <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>D - I Hate Non-integer Number</h1><h2 id="题意-12">题意</h2><p>给你一个长度为$n$的序列，你可以在其中选任意正整数个数，求选出的数的平均数为偶数的个数</p><h2 id="题解-10">题解</h2><blockquote><p>这题一眼$dp$，但是奈何我脑子笨一直没调对，好在最后半小时调出来了，太菜了555</p></blockquote><p>我们定义$ans_i$为选$i$个数，其平均数为偶数的个数</p><p>我们定义$dp[t][i][j][k]$代表选$t$个数的方案中前$i$个数选$j$个数，它们的和$\mod t \equiv k$的方案数</p><p>注意到$ans_i,ans_j(i \neq j)$之间没有任何关联，所以$dp$数组的第一维可以优化掉</p><p>状态转移方程也是十分显然</p><p>$dp[i][j][k]=dp[i-1][j][k]+dp[i-1][j-1][(k-a[i])\mod t+t)\mod t]$</p><h2 id="代码-12">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">LL dp[<span class="number">102</span>][<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">1</span>; p &lt;= n; ++ p) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; ++ j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; p; ++ k) &#123;</span><br><span class="line">                    <span class="type">int</span> kk = ((k - a[i]) % p + p) % p;</span><br><span class="line">                    dp[i][j][k] += dp[i - <span class="number">1</span>][j - <span class="number">1</span>][kk];</span><br><span class="line">                    dp[i][j][k] %= MOD;</span><br><span class="line">                    dp[i][j][k] += dp[i - <span class="number">1</span>][j][k];</span><br><span class="line">                    dp[i][j][k] %= MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans + dp[n][p][<span class="number">0</span>]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>E - Red and Blue Graph</h1><h2 id="题意-13">题意</h2><p>给你$n$个点，$m$条边的无向图，并且你可以将其中的$k$个点标记为红色，其余的标记为蓝色，求两端为不同颜色的边的个数为偶数的方案数</p><h2 id="题解-11">题解</h2><blockquote><p>这题真是你敢猜，就能对</p></blockquote><p>首先我们注意到答案跟节点的编号没有关系，我们从节点的度数出发，当相邻的节点涂同一个颜色时，它对答案的奇偶性不会发生影响，度数为偶数的节点涂成红色会产生偶数条边，度数为基数的节点涂成红色会产生奇数条边。这个结论可以画几个图验证一下，所以现在的问题是保证选择的节点中，度数为奇数的点的个数为偶数，度数为偶数的点随意，原问题转化为排列组合问题。</p><p>$ans = \sum \binom {x}{cnt_1} \times \binom{k-x}{cnt_0}$ 其中$x % \equiv 0$</p><h2 id="代码-13">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// assume -P &lt;= x &lt; 2P</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x += P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= P) &#123;</span><br><span class="line">        x -= P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">power</span><span class="params">(T a, i64 b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Z</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Z</span>(<span class="type">int</span> x = <span class="number">0</span>) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x)) &#123;&#125;</span><br><span class="line">    <span class="built_in">Z</span>(i64 x) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x % P)) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    Z <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Z</span>(<span class="built_in">norm</span>(P - x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, P - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">i64</span>(x) * rhs.x % P;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>*(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>+(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>-(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>/(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, Z &amp;a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">Z</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> Z &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line">Z inv[N], fac[N], finv[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pre_Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; ++ i) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        inv[i] = MOD - MOD / i * inv[MOD % i];</span><br><span class="line">        finv[i] = finv[i - <span class="number">1</span>] * inv[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Z <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[x] * finv[x - y] * finv[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre_Work</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        ++ deg[v];</span><br><span class="line">        ++ deg[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">cnt</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        ++ cnt[deg[i] &amp; <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Z ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i += <span class="number">2</span>) &#123;</span><br><span class="line">            ans += <span class="built_in">C</span>(cnt[<span class="number">0</span>], i) * <span class="built_in">C</span>(cnt[<span class="number">1</span>], k - i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i += <span class="number">2</span>) &#123;</span><br><span class="line">            ans += <span class="built_in">C</span>(cnt[<span class="number">0</span>], i) * <span class="built_in">C</span>(cnt[<span class="number">1</span>], k - i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面几题再补。。。</p>]]></content>
      
      
      <categories>
          
          <category> atcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Continental Cowngress G(2-sat)</title>
      <link href="/2022/07/31/The-Continental-Cowngress-G-2-sat/"/>
      <url>/2022/07/31/The-Continental-Cowngress-G-2-sat/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.com.cn/problem/P3007"> The Continental Cowngress G</a></p><blockquote><p>简述 :<br>给出 $n$ 个法案， $m$ 头牛的意见， 每头牛会表决两次。<br>每次表决格式为 <code>i Y</code> 表示“支持 $i$ 号法案”或 <code>i N</code> 表示“反对 $i$ 号法案”。<br>最终，每头牛至少要有一个表决被满足。不可能成立的话输出 <code>IMPOSSIBLE</code>，否则输出方案。</p></blockquote><p>由于对 Farmer John 的领导感到极其不悦，奶牛们退出了农场，组建了奶牛议会。</p><p>议会以“每头牛都可以获得自己想要的”为原则，建立了下面的投票系统： $M$只到场的奶牛 ( $1\le M\le 4000$ ) 会给 $N$ 个议案投票 ( $1\le N\le 1,000$ ) 。每只奶牛会对恰好两个议案 $B_i$ 与 $C_i$ ( $1\le B_i \le N$ ; $1 \le C_i \le N$ ) 投出“是”或“否”（输入文件中的 <code>Y</code> 和 <code>N</code> ）。</p><p>他们的投票结果分别为 $V_{B_i}$ ( $V_{B_i} \in { \texttt{Y}, \texttt{N}})$ 与 $V_{C_i} (V_{C_i} \in {\texttt{Y}, \texttt{N}})$。 最后，法案会以如下的方式决定：每只奶牛投出的两票中至少有一票和最终结果相符合。 例如 Bessie 给法案 $1$ 投了赞成 <code>Y</code>，给法案 $2$ 投了反对 <code>N</code>，那么在任何合法的法案通过方案中，必须满足法案 $1$ 必须是 <code>Y</code>或者议案 $2$ 必须是 <code>N</code>（或者同时满足）。</p><p>你的工作是确定哪些法案可以通过，哪些不能。</p><p>如果不存在这样一个方案， 输出 <code>IMPOSSIBLE</code>。</p><p>如果至少有一个解，对于每个法案输出：</p><ul><li><code>Y</code> 如果在每个解中，这个法案都必须通过。</li><li><code>N</code> 如果在每个解中，这个法案都必须驳回。</li><li><code>?</code> 如果有的解这个法案可以通过，有的解中这个法案会被驳回。</li></ul><h4 id="思路-每头牛都有两个表决且至少有一个表决被同意-满足二分图-建立2-sat模型-然后对于每个表决的两种情况都dfs一遍-若x与-x都存在-那么就说明无解">思路 : 每头牛都有两个表决且至少有一个表决被同意, 满足二分图, 建立2-sat模型. 然后对于每个表决的两种情况都dfs一遍, 若<code>x</code>与<code>!x</code>都存在, 那么就说明无解.</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(3,&quot;Ofast&quot;,&quot;inline&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (x &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (x &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zty(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">2005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_M = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> head[MAX_N], tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123; <span class="type">int</span> to, next;&#125; G[MAX_M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[++ tot] = node&#123;v, head[u]&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[MAX_N], low[MAX_N], col[MAX_N], cnt, num;</span><br><span class="line">stack&lt; <span class="type">int</span> &gt; st;</span><br><span class="line"><span class="type">bool</span> vis[MAX_N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    dfn[x] = low[x] = ++ num;</span><br><span class="line">    st.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[x]; i; i = G[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> y = G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!col[y]) &#123;</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x] == low[x]) &#123;</span><br><span class="line">        col[x] = ++ cnt;</span><br><span class="line">        <span class="keyword">while</span>(st.<span class="built_in">top</span>() != x) &#123;</span><br><span class="line">            col[st.<span class="built_in">top</span>()] = cnt;</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[x]; i; i = G[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> y = G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!vis[y]) <span class="built_in">dfs</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">dfs</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] &amp;&amp; vis[i + n]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="comment">// i means support and i + n means reject.....</span></span><br><span class="line">    <span class="keyword">while</span>(m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        string op1, op2;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; op1 &gt;&gt; b &gt;&gt; op2;</span><br><span class="line">        <span class="keyword">if</span>(op1 == <span class="string">&quot;Y&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(op2 == <span class="string">&quot;Y&quot;</span>) &#123;</span><br><span class="line">                <span class="built_in">add</span>(b + n, a); <span class="built_in">add</span>(a + n, b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">add</span>(b, a); <span class="built_in">add</span>(a + n, b + n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(op2 == <span class="string">&quot;Y&quot;</span>) &#123;</span><br><span class="line">                <span class="built_in">add</span>(b + n, a + n); <span class="built_in">add</span>(a, b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">add</span>(b, a + n); <span class="built_in">add</span>(a, b + n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(col[i] == col[i + n]) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">bool</span> f1 = <span class="built_in">check</span>(i), f2 = <span class="built_in">check</span>(i + n);</span><br><span class="line">        <span class="keyword">if</span>(f1 &amp;&amp; f2) ret += <span class="string">&quot;?&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(f1 &amp;&amp; !f2) ret += <span class="string">&quot;Y&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!f1 &amp;&amp; f2) ret += <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ret &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.IN&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.OUT&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> ZTY = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; ZTY;</span></span><br><span class="line">    <span class="keyword">while</span>(ZTY -- ) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粟粟的书架(主席树+前缀和)</title>
      <link href="/2022/07/31/%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2022/07/31/%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>题目链接<a href="https://www.luogu.com.cn/problem/P2468">粟粟的书架</a><br><strong>题目大意</strong>: 给你一个$n \times m$的矩阵, $q$个询问, 每次给你一个左上角在$(x1,y1)$,右下角在$(x2,y2)$的子矩阵, 和一个权值$h$, 要求在子矩阵中选出最少的数,使得这些数的和不小于$h$.<br><strong>思路</strong>:<br>注意到题目数据有$50 %$是${n \leq 200, n \leq 200, q \leq<br>2 \times 10^5}$, 这样我们可以对这$50%$的数据进行前缀和暴力预处理, 设$cnt_k[i][j][k]$为$(1,1) 到 (i,j)$这个子矩阵中$\geq k$的个数, $sum_k[i][j][k]为(1,1) 到(i,j)$这个子矩阵中$\geq k$的元素和.这样我们就可以二分$k$,来进行求解.<br>另外$50%$的数据是${n=1, m \leq 5 \times 10^5 , q \leq 2 \times 10^4}$, 那么就变成了区间$(y1,y2)$内找出最少的数使其和不小于$h$, 我们可以用主席树来求解, 并二分$k$使区间内大于等于$k$的元素和不小于$h$.<br>注意, 这里二分过程中求解的次数并非最小次数, 还需要将多余的$\lceil \frac{h}{k} \rceil$向上取整转化为次数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (x &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (x &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zty(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_M = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PresidentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> rt[MAX_N], tot;</span><br><span class="line">    <span class="type">int</span> sum[MAX_N * <span class="number">32</span>], cnt[MAX_N * <span class="number">32</span>], ls[MAX_N * <span class="number">32</span>], rs[MAX_N * <span class="number">32</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = ++ tot;</span><br><span class="line">        sum[x] = sum[p] + val;</span><br><span class="line">        cnt[x] = cnt[p] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(val &lt;= mid) ls[x] = <span class="built_in">update</span>(ls[p], l, mid, val), rs[x] = rs[p];</span><br><span class="line">        <span class="keyword">else</span> rs[x] = <span class="built_in">update</span>(rs[p], mid + <span class="number">1</span>, r, val), ls[x] = ls[p];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> (limit + l - <span class="number">1</span>) / l;</span><br><span class="line">        <span class="type">int</span> rcnt = cnt[rs[p]] - cnt[rs[q]];</span><br><span class="line">        <span class="type">int</span> rsum = sum[rs[p]] - sum[rs[q]];</span><br><span class="line">        <span class="keyword">if</span>(rsum &gt;= limit) <span class="keyword">return</span> <span class="built_in">query</span>(rs[p], rs[q], mid + <span class="number">1</span>, r, limit);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(ls[p], ls[q], l, mid, limit - rsum) + rcnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; PT;</span><br><span class="line"><span class="type">int</span> a[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="type">int</span> sum_k[<span class="number">205</span>][<span class="number">205</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> cnt_k[<span class="number">205</span>][<span class="number">205</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            PT.rt[i] = PT.<span class="built_in">update</span>(PT.rt[i - <span class="number">1</span>], <span class="number">1</span>, <span class="number">1000</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q -- ) &#123;</span><br><span class="line">            <span class="type">int</span> x1, y1, x2, y2, h;</span><br><span class="line">            cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; h;</span><br><span class="line">            <span class="keyword">if</span>(PT.sum[PT.rt[y2]] - PT.sum[PT.rt[y1 - <span class="number">1</span>]] &lt; h) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Poor QLW&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; PT.<span class="built_in">query</span>(PT.rt[y2], PT.rt[y1 - <span class="number">1</span>], <span class="number">1</span>, <span class="number">1000</span>, h) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j) cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">1000</span>; ++ k) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j) &#123;</span><br><span class="line">                    sum_k[i][j][k] = sum_k[i - <span class="number">1</span>][j][k] + sum_k[i][j - <span class="number">1</span>][k] - sum_k[i - <span class="number">1</span>][j - <span class="number">1</span>][k] + (a[i][j] &gt;= k ? a[i][j] : <span class="number">0</span>);</span><br><span class="line">                    cnt_k[i][j][k] = cnt_k[i - <span class="number">1</span>][j][k] + cnt_k[i][j - <span class="number">1</span>][k] - cnt_k[i - <span class="number">1</span>][j - <span class="number">1</span>][k] + (a[i][j] &gt;= k ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> Get_sum = [&amp;](<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="keyword">return</span> sum_k[x2][y2][k] - sum_k[x1 - <span class="number">1</span>][y2][k] - sum_k[x2][y1 - <span class="number">1</span>][k] + sum_k[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>][k];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> Get_cnt = [&amp;](<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt_k[x2][y2][k] - cnt_k[x1 - <span class="number">1</span>][y2][k] - cnt_k[x2][y1 - <span class="number">1</span>][k] + cnt_k[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>][k];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span>(q -- ) &#123;</span><br><span class="line">            <span class="type">int</span> x1, y1, x2, y2, h;</span><br><span class="line">            cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; h;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Get_sum</span>(x1, y1, x2, y2, <span class="number">1</span>) &lt; h) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Poor QLW&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1000</span>, ret = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">Get_sum</span>(x1, y1, x2, y2, mid) &gt;= h) &#123;</span><br><span class="line">                        ret = mid;</span><br><span class="line">                        l = mid + <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        r = mid - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; <span class="built_in">Get_cnt</span>(x1, y1, x2, y2, ret) - (<span class="built_in">Get_sum</span>(x1, y1, x2, y2, ret) - h) / ret &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.IN&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.OUT&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> ZTY = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; ZTY;</span></span><br><span class="line">    <span class="keyword">while</span>(ZTY -- ) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3302 [SDOI2013]森林(主席树+启发式合并)</title>
      <link href="/2022/07/31/P3302-SDOI2013-%E6%A3%AE%E6%9E%97-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>/2022/07/31/P3302-SDOI2013-%E6%A3%AE%E6%9E%97-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p>小 Z 有一片森林，含有 <code>N</code> 个节点，每个节点上都有一个非负整数作为权值。初始的时候，森林中有 <code>M</code> 条边。</p><p>小Z希望执行 <code>T</code> 个操作，操作有两类：</p><p><code>Q x y k</code> 查询点 <code>x</code> 到点 <code>y</code> 路径上所有的权值中，第 <code>k</code> 小的权值是多少。此操作保证点 <code>x</code> 和点 <code>y</code> 连通，同时这两个节点的路径上至少有 <code>k</code> 个点。<br><code>L x y</code> 在点 <code>x</code> 和点 <code>y</code> 之间连接一条边。保证完成此操作后，仍然是一片森林。<br>为了体现程序的在线性，我们把输入数据进行了加密。设 <code>lastans</code> 为程序上一次输出的结果，初始的时候 <code>lastans</code> 为 <code>0</code>。</p><p>对于一个输入的操作 <code>Q x y k</code>，其真实操作为 <code>Q x^lastans </code> <code>y^lastans </code> <code>k^lastans</code>。</p><p>对于一个输入的操作<code> L x y</code>，其真实操作为 <code>L x^lastans</code> <code> y^lastans</code>。其中 <code>^</code> 运算符表示异或，等价于 <code>Pascal</code> 中的 <code>xor</code> 运算符。</p><p>请写一个程序来帮助小 Z 完成这些操作。<br><strong>思路</strong>:<br>树上节点第<code>k</code>小, 我们很容易想到主席树, 但是操作<code>2</code>却有连边操作, 这时候我们可以考虑按树的秩的大小来合并两棵树, 并重新维护被合并的树上的主席树.<br>tips: 不同于一段序列上的<code>kth</code>查询, 树上<code>kth</code>查询需要求出两节点的<code>lca</code>, 以及<code>lca</code>的<code>father</code>, 类似于树上点差分.<br>这题空间得开很大, 因为每次合并两棵树都相当于重构一颗主席树.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(3,&quot;Ofast&quot;,&quot;inline&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (x &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (x &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zty(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">8e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> test;</span><br><span class="line"><span class="type">int</span> n, m, q, t;</span><br><span class="line"><span class="type">int</span> head[MAX_N], tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123; <span class="type">int</span> to, next;&#125; G[MAX_M * <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[MAX_N], b[MAX_N], sum;</span><br><span class="line"><span class="type">int</span> fa[MAX_N][<span class="number">20</span>], siz[MAX_N], dep[MAX_N], root[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[++ tot] = node&#123;v, head[u]&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">President_Tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> root[MAX_N * <span class="number">150</span>], tot;</span><br><span class="line">    <span class="type">int</span> cnt[MAX_N * <span class="number">150</span>], son[MAX_N * <span class="number">150</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = ++ tot;</span><br><span class="line">        cnt[x] = cnt[pre] + <span class="number">1</span>;</span><br><span class="line">        son[x][<span class="number">0</span>] = son[pre][<span class="number">0</span>];</span><br><span class="line">        son[x][<span class="number">1</span>] = son[pre][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt;= mid) son[x][<span class="number">0</span>] = <span class="built_in">insert</span>(son[pre][<span class="number">0</span>], l, mid, pos);</span><br><span class="line">        <span class="keyword">else</span> son[x][<span class="number">1</span>] = <span class="built_in">insert</span>(son[pre][<span class="number">1</span>], mid + <span class="number">1</span>, r, pos);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> ff, <span class="type">int</span> fff, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> lcnt = cnt[son[x][<span class="number">0</span>]] + cnt[son[y][<span class="number">0</span>]] - cnt[son[ff][<span class="number">0</span>]] - cnt[son[fff][<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> b[l];</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= lcnt) <span class="keyword">return</span> <span class="built_in">query</span>(son[x][<span class="number">0</span>], son[y][<span class="number">0</span>], son[ff][<span class="number">0</span>], son[fff][<span class="number">0</span>], l, mid, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(son[x][<span class="number">1</span>], son[y][<span class="number">1</span>], son[ff][<span class="number">1</span>], son[fff][<span class="number">1</span>], mid + <span class="number">1</span>, r, k - lcnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pt;</span><br><span class="line">bitset&lt; MAX_N &gt; vis;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> fat, <span class="type">int</span> boss)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="literal">true</span>;</span><br><span class="line">    fa[x][<span class="number">0</span>] = fat;</span><br><span class="line">    dep[x] = dep[fat] + <span class="number">1</span>;</span><br><span class="line">    root[x] = boss;</span><br><span class="line">    ++ siz[boss];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; ++ i) fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    pt.root[x] = pt.<span class="built_in">insert</span>(pt.root[fat], <span class="number">1</span>, sum, a[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[x]; i; i = G[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> y = G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(y != fat) <span class="built_in">dfs</span>(y, x, boss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = t; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[fa[y][i]] &gt;= dep[x]) y = fa[y][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = t; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i] != fa[y][i]) &#123;</span><br><span class="line">            x = fa[x][i]; y = fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; test;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    t = (<span class="type">int</span>)(<span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        root[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(b, a, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    sum = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + sum + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    <span class="keyword">while</span>(m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">add</span>(x, y); <span class="built_in">add</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">            root[i] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(i, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q -- ) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> x, y, k;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        x ^= lastans;</span><br><span class="line">        y ^= lastans;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&quot;Q&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            k ^= lastans;</span><br><span class="line">            <span class="type">int</span> ff = <span class="built_in">lca</span>(x, y);</span><br><span class="line">            <span class="type">int</span> ret = pt.<span class="built_in">query</span>(pt.root[x], pt.root[y], pt.root[ff], pt.root[fa[ff][<span class="number">0</span>]], <span class="number">1</span>, sum, k);</span><br><span class="line">            lastans = ret;</span><br><span class="line">            cout &lt;&lt; ret &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">add</span>(x, y); <span class="built_in">add</span>(y, x);</span><br><span class="line">            <span class="type">int</span> rtx = root[x], rty = root[y];</span><br><span class="line">            <span class="keyword">if</span>(siz[rtx] &lt; siz[rty]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(x, y);</span><br><span class="line">                <span class="built_in">swap</span>(rtx, rty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x, rtx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.IN&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.OUT&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> ZTY = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; ZTY;</span></span><br><span class="line">    <span class="keyword">while</span>(ZTY -- ) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家园 / 星际转移问题(洛谷P2754 分层图+最大流)</title>
      <link href="/2022/07/31/%E5%AE%B6%E5%9B%AD-%E6%98%9F%E9%99%85%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98-%E6%B4%9B%E8%B0%B7P2754-%E5%88%86%E5%B1%82%E5%9B%BE-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2022/07/31/%E5%AE%B6%E5%9B%AD-%E6%98%9F%E9%99%85%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98-%E6%B4%9B%E8%B0%B7P2754-%E5%88%86%E5%B1%82%E5%9B%BE-%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><strong>再一次感觉网络流太神奇了qwq</strong></p><p>题目链接:[星际转移问题](<a href="https://www.luogu.com.cn/problem/P4009">P4009 汽车加油行驶问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>)</p><p>受到之前那道[汽车加油行驶问题](<a href="https://www.luogu.com.cn/problem/P4009">P4009 汽车加油行驶问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>)按汽油剩余量建图的启发,这题自然而然的就想到了按时间建图,但是怎么按时间建图又成了一个难点.</p><p>首先判断是否有解,地球与月亮联通时必定有解. 这一步可以用<strong>并查集</strong>来判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DSU <span class="title">dsu</span><span class="params">(n + <span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s[i]) cin &gt;&gt; x, ++ x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; ++ j) dsu.<span class="built_in">merge</span>(s[i][j], s[i][j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dsu.<span class="built_in">find</span>(<span class="number">0</span>) != dsu.<span class="built_in">find</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于数据范围很小,我们可以枚举时间,然后跑最大流看是否等于总人数$K$</p><p>本题的所有角色编号</p><ul><li><p>源点: $S$</p></li><li><p>汇点: $T$</p></li><li><p>地球: $1$</p></li><li><p>月球: $0$</p></li><li><p>空间站: $0 \backsim n+1$ $($默认地球和月球也是空间站$)$</p></li><li><p>太空船: $n+2 \backsim n+1+m$</p></li></ul><p>所以除开源汇点外,节点个数$cnt$为$n+m+2$,对于时间$T$对应的节点编号为$index+T \times (n+m+2)$</p><p>现在是最重要的建图环节$!!!$ 设现在枚举到时间$T$</p><ul><li><p>源点向$0$时刻的地球连边, $T$时刻的月球连边</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.<span class="built_in">AddEdge</span>(d.S, <span class="number">1</span>, k);</span><br><span class="line">d.<span class="built_in">AddEdge</span>(<span class="number">0</span> + cnt * T, d.T, k);</span><br></pre></td></tr></table></figure></li><li><p>任意时刻,人都有三个选择</p><ol><li><p>太空船 $\rightarrow$空间站</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// j时刻人从空间站到飞船</span></span><br><span class="line">d.<span class="built_in">AddEdge</span>(s[i][now] + j * cnt, i + n + <span class="number">1</span> + j * cnt, cap[i]);</span><br></pre></td></tr></table></figure></li><li><p>空间站$\rightarrow$太空船</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// j时刻人从飞船到空间站</span></span><br><span class="line">d.<span class="built_in">AddEdge</span>(i + n + <span class="number">1</span> + j * cnt, s[i][now] + j * cnt, cap[i]);</span><br></pre></td></tr></table></figure></li><li><p>停留(这个选择是最容易忽视的)太空船或空间站的部分人数从上一时刻到下一时刻不变</p><p>这一点是受到[餐巾计划问题](<a href="https://www.luogu.com.cn/problem/P1251">P1251 餐巾计划问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>)将脏抹布留到明天再洗的启发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= T; ++ j) &#123;</span><br><span class="line">    <span class="type">int</span> now = j % s[i].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (j) &#123;</span><br><span class="line">        <span class="comment">// 空间站上的人停留</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt;= n + <span class="number">1</span>; ++ p) &#123;</span><br><span class="line">            d.<span class="built_in">AddEdge</span>(p + (j - <span class="number">1</span>) * cnt, p + j * cnt, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 飞船上的人停留</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = n + <span class="number">2</span>; p &lt;= n + <span class="number">1</span> + m; ++ p) &#123;</span><br><span class="line">            d.<span class="built_in">AddEdge</span>(p + (j - <span class="number">1</span>) * cnt, p + j * cnt, cap[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>最后判断最大流是否等于$K$结束枚举</p><p>完整代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e4</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, cap, flow;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f) : <span class="built_in">from</span>(u), <span class="built_in">to</span>(v), <span class="built_in">cap</span>(c), <span class="built_in">flow</span>(f) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m, S, T;</span><br><span class="line">    vector&lt; Edge &gt; edges;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; G[N];</span><br><span class="line">    <span class="type">int</span> d[N], cur[N];</span><br><span class="line">    <span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Dinic</span>(<span class="type">int</span> S, <span class="type">int</span> T) : <span class="built_in">S</span>(S), <span class="built_in">T</span>(T) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cap)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(from, to, cap, <span class="number">0</span>));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        m = edges.<span class="built_in">size</span>();</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(m - <span class="number">2</span>);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">        Q.<span class="built_in">push</span>(S);</span><br><span class="line">        d[T] = <span class="number">0</span>;</span><br><span class="line">        vis[S] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = Q.<span class="built_in">front</span>();</span><br><span class="line">            Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">                Edge&amp; e = edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span> (!vis[e.to] &amp;&amp; e.cap &gt; e.flow) &#123;</span><br><span class="line">                    vis[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    d[e.to] = d[x] + <span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[T];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == T || a == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>, f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; i = cur[x]; i &lt; G[x].<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">            Edge&amp; e = edges[G[x][i]];</span><br><span class="line">            <span class="keyword">if</span> (d[x] + <span class="number">1</span> == d[e.to] &amp;&amp; (f = <span class="built_in">DFS</span>(e.to, <span class="built_in">min</span>(a, e.cap - e.flow))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                e.flow += f;</span><br><span class="line">                edges[G[x][i] ^ <span class="number">1</span>].flow -= f;</span><br><span class="line">                flow += f;</span><br><span class="line">                a -= f;</span><br><span class="line">                <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Maxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">BFS</span>()) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">DFS</span>(S, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; f;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) : <span class="built_in">f</span>(n) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x != y) f[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> cap[<span class="number">25</span>];</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; s[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="function">DSU <span class="title">dsu</span><span class="params">(n + <span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; cap[i];</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        s[i].<span class="built_in">resize</span>(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s[i]) cin &gt;&gt; x, ++ x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; ++ j) dsu.<span class="built_in">merge</span>(s[i][j], s[i][j + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dsu.<span class="built_in">find</span>(<span class="number">0</span>) != dsu.<span class="built_in">find</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> T = <span class="number">1</span>; ; ++ T) &#123;</span><br><span class="line">        <span class="comment">// 0 moon</span></span><br><span class="line">        <span class="comment">// 1 earth</span></span><br><span class="line">        <span class="comment">// 0~n+1 space station</span></span><br><span class="line">        <span class="comment">// n+2~n+1+m space ship</span></span><br><span class="line">        <span class="type">int</span> cnt = n + m + <span class="number">2</span>;</span><br><span class="line">        <span class="function">Dinic <span class="title">d</span><span class="params">(cnt * (T + <span class="number">1</span>) + <span class="number">1</span>, cnt * (T + <span class="number">1</span>) + <span class="number">2</span>)</span></span>;</span><br><span class="line">        d.<span class="built_in">AddEdge</span>(d.S, <span class="number">1</span>, k);</span><br><span class="line">        d.<span class="built_in">AddEdge</span>(<span class="number">0</span> + cnt * T, d.T, k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= T; ++ j) &#123;</span><br><span class="line">                <span class="type">int</span> now = j % s[i].<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                    <span class="comment">// 空间站上的人停留</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt;= n + <span class="number">1</span>; ++ p) &#123;</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(p + (j - <span class="number">1</span>) * cnt, p + j * cnt, INF);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 飞船上的人停留</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> p = n + <span class="number">2</span>; p &lt;= n + <span class="number">1</span> + m; ++ p) &#123;</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(p + (j - <span class="number">1</span>) * cnt, p + j * cnt, cap[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 人从空间站到飞船</span></span><br><span class="line">                d.<span class="built_in">AddEdge</span>(s[i][now] + j * cnt, i + n + <span class="number">1</span> + j * cnt, cap[i]);</span><br><span class="line">                <span class="comment">// 人从飞船到空间站</span></span><br><span class="line">                d.<span class="built_in">AddEdge</span>(i + n + <span class="number">1</span> + j * cnt, s[i][now] + j * cnt, cap[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d.<span class="built_in">Maxflow</span>() == k) &#123;</span><br><span class="line">            cout &lt;&lt; T &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总算是把网络流24题肝完了2333</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汽车加油行驶问题(洛谷P4009 分层图费用流)</title>
      <link href="/2022/07/30/%E6%B1%BD%E8%BD%A6%E5%8A%A0%E6%B2%B9%E8%A1%8C%E9%A9%B6%E9%97%AE%E9%A2%98-%E6%B4%9B%E8%B0%B7P4009-%E5%88%86%E5%B1%82%E5%9B%BE%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
      <url>/2022/07/30/%E6%B1%BD%E8%BD%A6%E5%8A%A0%E6%B2%B9%E8%A1%8C%E9%A9%B6%E9%97%AE%E9%A2%98-%E6%B4%9B%E8%B0%B7P4009-%E5%88%86%E5%B1%82%E5%9B%BE%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>第一次见到分层思想和网络流联系起来的题,浅录一下</p><p>题目链接: <a href="https://www.luogu.com.cn/problem/P4009">P4009 汽车加油行驶问题</a></p><p>该题方法很多,<s>但是网络流应该是最能接受和理解的吧</s> (</p><p>由于汽油的影响,建图变得不那么容易,常规建图又无法将位置和油量结合起来,所以考虑分层建图</p><p><strong>我们定义状态$(i,j,k)$代表走到点$(i,j)$时剩余油量为$k$.</strong></p><ul><li><p>建立源点<code>S</code>和汇点<code>T</code></p><p>$S \Rightarrow (1,1,K)$ 连容量为<code>1</code>,费用为<code>0</code>的边</p><p>因为不确定到达终点时剩余油量的多少</p><p>$(n,n,0 \backsim K) \Rightarrow T$连容量为<code>1</code>,费用为<code>0</code>的边</p></li><li><p>对于已经放置加油站的点</p><p>由于是强制消费(呜呜),所以无论来之前是多少油都得加满</p><p>$(i,j,0 \backsim K-1) \Rightarrow (i,j,K)$连容量为<code>1</code>,费用为<code>A</code>的边</p><p>此时已经为满油状态</p><p>$(i,j,K)$向下一层的$(i-1,j)$以及$(i,j-1)$连容量为<code>1</code>,费用为<code>B</code>的边</p><p>$(i,j,K)$向下一层的$(i+1,j)$以及$(i,j+1)$连容量为<code>1</code>,费用为<code>0</code>的边</p></li><li><p>对于没有放置加油站的点</p><p>首先要明确一个问题,什么时候必须放置加油站,情况只有一个:走到没加油站的位置并且没油了</p><p>$(i,j,0) \Rightarrow (i,j,K)$连容量为<code>1</code>,费用为<code>A+C</code>的边</p><p>$(i,j,1 \backsim K)$向下一层的$(i-1,j)$以及$(i,j-1)$连容量为<code>1</code>,费用为<code>B</code>的边</p><p>$(i,j,1 \backsim K)$向下一层的$(i+1,j)$以及$(i,j+1)$连容量为<code>1</code>,费用为<code>0</code>的边</p></li></ul><p><strong>最大流对应下的最小费用即为所求</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, flow, cost;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> flow, <span class="type">int</span> cost) : <span class="built_in">from</span>(from), <span class="built_in">to</span>(to), <span class="built_in">flow</span>(flow), <span class="built_in">cost</span>(cost) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="type">int</span> S, T, m; </span><br><span class="line">    <span class="type">int</span> d[N], incf[N], pre[N];</span><br><span class="line">    <span class="type">bool</span> vis[N];</span><br><span class="line">    vector&lt; Edge &gt; edges;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; G[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Dinic</span>(<span class="type">int</span> S, <span class="type">int</span> T) : <span class="built_in">S</span>(S), <span class="built_in">T</span>(T) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(from, to, flow, cost));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(to, from, <span class="number">0</span>, -cost));</span><br><span class="line">        m = edges.<span class="built_in">size</span>();</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(m - <span class="number">2</span>);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">        <span class="built_in">memset</span>(incf, <span class="number">0</span>, <span class="keyword">sizeof</span> incf);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">        Q.<span class="built_in">push</span>(S);</span><br><span class="line">        vis[S] = <span class="literal">true</span>, incf[S] = INF, d[S] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = Q.<span class="built_in">front</span>();</span><br><span class="line">            Q.<span class="built_in">pop</span>();</span><br><span class="line">            vis[x] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">                Edge &amp;e = edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span> (d[x] + e.cost &lt; d[e.to] &amp;&amp; e.flow) &#123;</span><br><span class="line">                    d[e.to] = d[x] + e.cost;</span><br><span class="line">                    pre[e.to] = G[x][i];</span><br><span class="line">                    incf[e.to] = <span class="built_in">min</span>(incf[x], e.flow);</span><br><span class="line">                    <span class="keyword">if</span> (!vis[e.to]) &#123;</span><br><span class="line">                        vis[e.to] = <span class="literal">true</span>;</span><br><span class="line">                        Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[T] != INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; <span class="title">MCMF</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxflow = <span class="number">0</span>, mincost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">SPFA</span>()) &#123;</span><br><span class="line">            maxflow += incf[T];</span><br><span class="line">            mincost += incf[T] * d[T];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = T; i != S; i = edges[pre[i] ^ <span class="number">1</span>].to) &#123;</span><br><span class="line">                edges[pre[i]].flow -= incf[T];</span><br><span class="line">                edges[pre[i] ^ <span class="number">1</span>].flow += incf[T];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;maxflow, mincost&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, K, A, B, C;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; K &gt;&gt; A &gt;&gt; B &gt;&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> get = [&amp;] (<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k) &#123; <span class="keyword">return</span> k * n * n + (i - <span class="number">1</span>) * n + j;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f = [&amp;] (<span class="type">int</span> x, <span class="type">int</span> y) &#123; <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= n;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//0~k层代表i格油</span></span><br><span class="line">    <span class="function">Dinic <span class="title">d</span><span class="params">(<span class="number">0</span>, (K + <span class="number">1</span>) * n * n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    d.<span class="built_in">AddEdge</span>(d.S, <span class="built_in">get</span>(<span class="number">1</span>, <span class="number">1</span>, K), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= K; ++ k) </span><br><span class="line">        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(n, n, k), d.T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, x; j &lt;= n; ++ j) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (x) &#123;</span><br><span class="line">                <span class="comment">// 非满油状态向满油状态连边</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; K; ++ k) </span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i, j, K), <span class="number">1</span>, A);</span><br><span class="line">                <span class="comment">// 满油向下一层相邻点连边</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(i - <span class="number">1</span>, j))</span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, K), <span class="built_in">get</span>(i - <span class="number">1</span>, j, K - <span class="number">1</span>), <span class="number">1</span>, B);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(i, j - <span class="number">1</span>))</span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, K), <span class="built_in">get</span>(i, j - <span class="number">1</span>, K - <span class="number">1</span>), <span class="number">1</span>, B);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(i + <span class="number">1</span>, j))</span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, K), <span class="built_in">get</span>(i + <span class="number">1</span>, j, K - <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(i, j + <span class="number">1</span>))</span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, K), <span class="built_in">get</span>(i, j + <span class="number">1</span>, K - <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 向相邻点连边</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = K; k &gt;= <span class="number">1</span>; -- k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(i - <span class="number">1</span>, j))</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i - <span class="number">1</span>, j, k - <span class="number">1</span>), <span class="number">1</span>, B);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(i, j - <span class="number">1</span>))</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i, j - <span class="number">1</span>, k - <span class="number">1</span>), <span class="number">1</span>, B);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(i + <span class="number">1</span>, j))</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i + <span class="number">1</span>, j, k - <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(i, j + <span class="number">1</span>))</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i, j + <span class="number">1</span>, k - <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// *只有遇到没油且没加油站的时候,才会放置加油站并且加油</span></span><br><span class="line">                d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, <span class="number">0</span>), <span class="built_in">get</span>(i, j, K), <span class="number">1</span>, A + C);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; d.<span class="built_in">MCMF</span>().second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Something About Pikachu</title>
      <link href="/2022/07/30/hello-world/"/>
      <url>/2022/07/30/hello-world/</url>
      
        <content type="html"><![CDATA[<h1>Here are my Accounts</h1><p>codeforces: <a href="https://codeforces.com/profile/_pikaqiu">${\color{Blue}\rm  pikaqiu }$</a></p><p>atcoder: <a href="https://atcoder.jp/users/youzhapikaqiu">${\color{Cerulean} \rm youzhapikaqiu}$</a></p><p>luogu: <a href="https://www.luogu.com.cn/user/440870">${\color{ForestGreen}\rm 油炸皮卡丘0vo}$</a></p><p>nowcoder: <a href="https://ac.nowcoder.com/acm/contest/profile/319541823">pikachu</a></p><p>csdn: <a href="https://blog.csdn.net/weixin_51596558?spm=1000.2115.3001.5343">pikachu</a></p><p>vjudge: <a href="https://vjudge.net/user/ZTYisFIVE">ZTYisFIVE</a></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
