<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分块习题集</title>
      <link href="/2022/08/19/%E5%88%86%E5%9D%97%E4%B9%A0%E9%A2%98%E9%9B%86/"/>
      <url>/2022/08/19/%E5%88%86%E5%9D%97%E4%B9%A0%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>分块是一种很灵活的数据结构，能用 $sqrt$ 的时间解决 $log$ 不能解决的事情。</p><blockquote><p>以下题目按洛谷颜色排列 $\color{red}{qwq}$</p></blockquote><h1><a href="https://www.luogu.com.cn/problem/P2464">P2464 [SDOI2008] 郁闷的小 J</a></h1><h2 id="题意简述">题意简述</h2><p>查询区间内某个数的出现次数，包含单点修改操作。</p><h2 id="思路-27">思路</h2><p>$f_{i,j}$ 为 $j$ 这个数在前 $i$ 块内的出现次数，维护这个东西即可。</p><h2 id="代码-37">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">320</span>;</span><br><span class="line"><span class="type">int</span> n, q, a[N], b[N * <span class="number">2</span>], cur;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    std::string op;</span><br><span class="line">    <span class="type">int</span> x, y, p;</span><br><span class="line">&#125; Q[N];</span><br><span class="line"><span class="type">int</span> num, st[M], ed[M], belong[N], f[M][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = belong[l], y = belong[r];</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++ i) &#123;</span><br><span class="line">            res += a[i] == pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = f[y - <span class="number">1</span>][pos] - f[x][pos];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[x]; ++ i) &#123;</span><br><span class="line">        res += a[i] == pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[y]; i &lt;= r; ++ i) &#123;</span><br><span class="line">        res += a[i] == pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">copy</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">    cur = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++ i) &#123;</span><br><span class="line">        std::string op;</span><br><span class="line">        <span class="type">int</span> x, y, p;</span><br><span class="line">        std::cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;Q&quot;</span>) &#123;</span><br><span class="line">            std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; p;</span><br><span class="line">            Q[i] = &#123;op, x, y, p&#125;;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            std::cin &gt;&gt; x &gt;&gt; p;</span><br><span class="line">            Q[i] = &#123;op, x, <span class="number">0</span>, p&#125;;</span><br><span class="line">            b[++ cur] = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>);</span><br><span class="line">    cur = std::<span class="built_in">unique</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        a[i] = std::<span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    num = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        st[i] = n / num * (i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        ed[i] = n / num * i;</span><br><span class="line">    &#125;</span><br><span class="line">    ed[num] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        std::<span class="built_in">fill</span>(belong + st[i], belong + ed[i] + <span class="number">1</span>, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = st[i]; j &lt;= ed[i]; ++ j) &#123;</span><br><span class="line">            ++ f[i][a[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cur; ++ j) &#123;</span><br><span class="line">            f[i][j] += f[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++ i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [op, x, y, p] = Q[i];</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;Q&quot;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> pos = std::<span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>, p) - b;</span><br><span class="line">            std::cout &lt;&lt; <span class="built_in">calc</span>(x, y, pos) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> pos = belong[x];</span><br><span class="line">            <span class="type">int</span> kk = std::<span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>, p) - b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = pos; j &lt;= num; ++ j) &#123;</span><br><span class="line">                -- f[j][a[x]];</span><br><span class="line">                ++ f[j][kk];</span><br><span class="line">            &#125;</span><br><span class="line">            a[x] = kk;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><a href="https://www.luogu.com.cn/problem/P3396">P3396 哈希冲突</a></h1><h2 id="题意简述-2">题意简述</h2><p>给出长度为 $n$ 的序列 $A$ ，有若干次询问和修改，修改操作为将 $A_x=y$ ，查询操作为查询数组下标 $\mod x \equiv y$  对应序列权值总和。</p><h2 id="思路-28">思路</h2><p>这个题相对基础一些，考虑暴力查询</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = y; i &lt;= n; i += x) &#123;</span><br><span class="line">    ans += a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的复杂度为 $\Theta(\frac{n}{x})$ ，与 $x$ 的大小成负相关，所以我们考虑根号分治，暴力查询 $x \geq \sqrt n$ 的答案，预处理$x &lt; \sqrt n$ 的答案即可。</p><h2 id="代码-38">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">150005</span>;</span><br><span class="line"><span class="type">int</span> n, q, a[N];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">400</span>][<span class="number">400</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j) &#123;</span><br><span class="line">            sum[j][i % j] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        std::string op;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        std::cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt;= m) &#123;</span><br><span class="line">                std::cout &lt;&lt; sum[x][y] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = y; i &lt;= n; i += x) &#123;</span><br><span class="line">                    ans += a[i];</span><br><span class="line">                &#125;</span><br><span class="line">                std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">                sum[i][x % i] -= a[x] - y;</span><br><span class="line">            &#125;</span><br><span class="line">            a[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><a href="https://www.luogu.com.cn/problem/P3203">P3203 [HNOI2010]弹飞绵羊</a></h1><h2 id="题意简述-3">题意简述</h2><p>给出长度为 $n$ 的数组，当你处于下标 $x$ 时，你能跳到下标为 $x+a_x$ 的地方。</p><p>每次询问当你处于下标 $k$ 时，跳到 $&gt; n$  的位置需要跳的次数，以及单点修改。</p><h2 id="思路-29">思路</h2><p>我们考虑对块内的元素进行处理，设 $f_x$ 为 $x$ 第一次跳出它所属的块的下标， $g_x$ 为 $x$ 跳出它所属的块所需要跳的次数。</p><p>类似于并查集的路径压缩</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ed[x]; i &gt;= st[x]; -- i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i + a[i] &gt; ed[x]) &#123;</span><br><span class="line">        f[i] = i + a[i];</span><br><span class="line">        g[x] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        f[i] = f[i + a[i]];</span><br><span class="line">        g[x] = g[i + a[i]] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询时暴力往后跳即可</p><p>单点修改时，我们只需修改所属块内的信息</p><p>单次操作时间复杂度为 $\Theta(\sqrt n)$</p><h2 id="代码-39">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, M = <span class="number">450</span>;</span><br><span class="line"><span class="type">int</span> n, q, a[N];</span><br><span class="line"><span class="type">int</span> num, st[M], ed[M], belong[N], step[N], to[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    num = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        st[i] = n / num * (i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        ed[i] = n / num * i;</span><br><span class="line">    &#125;</span><br><span class="line">    ed[num] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        std::<span class="built_in">fill</span>(belong + st[i], belong + ed[i] + <span class="number">1</span>, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = ed[i]; j &gt;= st[i]; -- j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j + a[j] &gt; ed[i]) &#123;</span><br><span class="line">                step[j] = <span class="number">1</span>;</span><br><span class="line">                to[j] = j + a[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                step[j] = step[j + a[j]] + <span class="number">1</span>;</span><br><span class="line">                to[j] = to[j + a[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        std::cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        ++ x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            std::cin &gt;&gt; y;</span><br><span class="line">            <span class="keyword">if</span> (a[x] == y) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a[x] = y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = ed[belong[x]]; j &gt;= st[belong[x]]; -- j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j + a[j] &gt; ed[belong[x]]) &#123;</span><br><span class="line">                    step[j] = <span class="number">1</span>;</span><br><span class="line">                    to[j] = j + a[j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    step[j] = step[j + a[j]] + <span class="number">1</span>;</span><br><span class="line">                    to[j] = to[j + a[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x &lt;= n) &#123;</span><br><span class="line">                res += step[x];</span><br><span class="line">                x = to[x];</span><br><span class="line">            &#125;</span><br><span class="line">            std::cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><a href="https://www.luogu.com.cn/problem/P3730">P3730 曼哈顿交易</a></h1><h2 id="题意简述-4">题意简述</h2><p>查询区间出现次数第 $k$ 小的出现次数。</p><h2 id="思路-30">思路</h2><p>第一反应，莫队套主席树？但是 $\Theta(n\sqrt n \log n)$ 的复杂度看着很不靠谱(卡卡常应该行?)所以只能另辟蹊径。</p><p>考虑值域分块，维护出现次数以及次数的个数，查询时扫描每个块，直到找到第 $k$ 小的次数。</p><h2 id="代码-40">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">320</span>;</span><br><span class="line"><span class="type">int</span> n, m, a[N], b[N], cur;</span><br><span class="line"><span class="type">int</span> block;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, k, id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Query &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l / block == o.l / block ? r != o.r &amp;&amp; ((l / block) &amp; <span class="number">1</span>) ^ (r &lt; o.r) : l &lt; o.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[N];</span><br><span class="line"><span class="type">int</span> num, st[M], ed[M], belong[N], siz[M];</span><br><span class="line"><span class="type">int</span> ans[N], cnt[N], val[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    -- val[x - <span class="number">1</span>];</span><br><span class="line">    -- siz[belong[x - <span class="number">1</span>]];</span><br><span class="line">    ++ val[x];</span><br><span class="line">    ++ siz[belong[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    -- val[x];</span><br><span class="line">    -- siz[belong[x]];</span><br><span class="line">    ++ val[x - <span class="number">1</span>];</span><br><span class="line">    ++ siz[belong[x - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; siz[i]) &#123;</span><br><span class="line">            k -= siz[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = st[i]; j &lt;= ed[i]; ++ j) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((k -= val[j]) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">copy</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">    std::<span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    cur = std::<span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        a[i] = std::<span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    block = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, k;</span><br><span class="line">        std::cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">        Q[i] = &#123;l, r, k, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(Q + <span class="number">1</span>, Q + m + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 值域(出现次数)分块</span></span><br><span class="line">    num = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        st[i] = n / num * (i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        ed[i] = n / num * i;</span><br><span class="line">    &#125;</span><br><span class="line">    ed[num] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        std::<span class="built_in">fill</span>(belong + st[i], belong + ed[i] + <span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, L = <span class="number">1</span>, R = <span class="number">0</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[l, r, k, id] = Q[i];</span><br><span class="line">        <span class="keyword">while</span> (L &gt; l) &#123;</span><br><span class="line">            -- L;</span><br><span class="line">            ++ cnt[a[L]];</span><br><span class="line">            <span class="built_in">add</span>(cnt[a[L]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (R &lt; r) &#123;</span><br><span class="line">            ++ R;</span><br><span class="line">            ++ cnt[a[R]];</span><br><span class="line">            <span class="built_in">add</span>(cnt[a[R]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (L &lt; l) &#123;</span><br><span class="line">            <span class="built_in">del</span>(cnt[a[L]]);</span><br><span class="line">            -- cnt[a[L]];</span><br><span class="line">            ++ L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (R &gt; r) &#123;</span><br><span class="line">            <span class="built_in">del</span>(cnt[a[R]]);</span><br><span class="line">            -- cnt[a[R]];</span><br><span class="line">            -- R;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[id] = <span class="built_in">query</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        std::cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><a href="https://www.luogu.com.cn/problem/P4135">P4135 作诗</a></h1><h2 id="题意简述-5">题意简述</h2><p>查询区间出现次数为偶数的数的个数，强制在线。</p><h2 id="思路-31">思路</h2><p>维护每个数相对于块的出现次数前缀和，暴力查询判断即可。</p><h2 id="代码-41">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, c, m, a[N], b[N], cur;</span><br><span class="line"><span class="type">int</span> num, st[<span class="number">320</span>], ed[<span class="number">320</span>], belong[N], f[<span class="number">320</span>][<span class="number">320</span>], g[<span class="number">320</span>][N], cnt[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = belong[l], y = belong[r];</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++ i) &#123;</span><br><span class="line">            cnt[a[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++ i) &#123;</span><br><span class="line">            ++ cnt[a[i]];</span><br><span class="line">            <span class="keyword">if</span> ((cnt[a[i]] &amp; <span class="number">1</span>) &amp;&amp; cnt[a[i]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                -- res;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(cnt[a[i]] &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">                ++ res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = f[x + <span class="number">1</span>][y - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[x]; ++ i) &#123;</span><br><span class="line">        cnt[a[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[y]; i &lt;= r; ++ i) &#123;</span><br><span class="line">        cnt[a[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[x]; ++ i) &#123;</span><br><span class="line">        ++ cnt[a[i]];</span><br><span class="line">        <span class="type">int</span> k = cnt[a[i]] + g[y - <span class="number">1</span>][a[i]] - g[x][a[i]];</span><br><span class="line">        <span class="keyword">if</span> ((k &amp; <span class="number">1</span>) &amp;&amp; k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            -- res;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(k &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            ++ res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[y]; i &lt;= r; ++ i) &#123;</span><br><span class="line">        ++ cnt[a[i]];</span><br><span class="line">        <span class="type">int</span> k = cnt[a[i]] + g[y - <span class="number">1</span>][a[i]] - g[x][a[i]];</span><br><span class="line">        <span class="keyword">if</span> ((k &amp; <span class="number">1</span>) &amp;&amp; k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            -- res;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(k &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            ++ res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; c &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">copy</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">    std::<span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    cur = std::<span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        a[i] = std::<span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    num = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        st[i] = n / num * (i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        ed[i] = n / num * i;</span><br><span class="line">    &#125;</span><br><span class="line">    ed[num] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = st[i]; j &lt;= ed[i]; ++ j) &#123;</span><br><span class="line">            belong[j] = i;</span><br><span class="line">            ++ g[i][a[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cur; ++ j) &#123;</span><br><span class="line">            g[i][j] += g[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        std::<span class="built_in">fill</span>(cnt + <span class="number">1</span>, cnt + cur + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= num; ++ j) &#123;</span><br><span class="line">            <span class="type">int</span> res = f[i][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = st[j]; k &lt;= ed[j]; ++ k) &#123;</span><br><span class="line">                ++ cnt[a[k]];</span><br><span class="line">                <span class="keyword">if</span> ((cnt[a[k]] &amp; <span class="number">1</span>) &amp;&amp; cnt[a[k]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    -- res;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(cnt[a[k]] &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">                    ++ res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i][j] = res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        std::cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        l = (l + lastans) % n + <span class="number">1</span>;</span><br><span class="line">        r = (r + lastans) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; (lastans = <span class="built_in">calc</span>(l, r)) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><a href="https://www.luogu.com.cn/problem/P4168">P4168 [Violet]蒲公英</a></h1><h2 id="题意简述-6">题意简述</h2><p>区间查询出现次数最多的且编号最小的数，强制在线。</p><h2 id="思路-32">思路</h2><p>设 $f_{x, y}$ 为块 $x$ 到块 $y$ 内的答案，$c_{x, y}$ 为块 $x$ 到块 $y$ 内最多的出现次数，然后暴力判断更新？</p><h2 id="代码-42">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, q, a[N], b[N], cur;</span><br><span class="line"><span class="type">int</span> num, st[N], ed[N], belong[N], f[<span class="number">205</span>][<span class="number">205</span>], sum[<span class="number">205</span>][N], cnt[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum[r][x] - sum[l - <span class="number">1</span>][x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = belong[l], y = belong[r];</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="type">int</span> MAX = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++ i) &#123;</span><br><span class="line">            ++ cnt[a[i]];</span><br><span class="line">            <span class="keyword">if</span> (cnt[a[i]] &gt; cnt[MAX]) &#123;</span><br><span class="line">                MAX = a[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cnt[a[i]] == cnt[MAX] &amp;&amp; MAX &gt; a[i]) &#123;</span><br><span class="line">                MAX = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++ i) &#123;</span><br><span class="line">            cnt[a[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> MAX = f[x + <span class="number">1</span>][y - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[x]; ++ i) &#123;</span><br><span class="line">        ++ cnt[a[i]];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">c</span>(x + <span class="number">1</span>, y - <span class="number">1</span>, a[i]) + cnt[a[i]] &gt; <span class="built_in">c</span>(x + <span class="number">1</span>, y - <span class="number">1</span>, MAX) + cnt[MAX]) &#123;</span><br><span class="line">            MAX = a[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">c</span>(x + <span class="number">1</span>, y - <span class="number">1</span>, a[i]) + cnt[a[i]] == <span class="built_in">c</span>(x + <span class="number">1</span>, y - <span class="number">1</span>, MAX) + cnt[MAX] &amp;&amp; MAX &gt; a[i]) &#123;</span><br><span class="line">            MAX = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[y]; i &lt;= r; ++ i) &#123;</span><br><span class="line">        ++ cnt[a[i]];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">c</span>(x + <span class="number">1</span>, y - <span class="number">1</span>, a[i]) + cnt[a[i]] &gt; <span class="built_in">c</span>(x + <span class="number">1</span>, y - <span class="number">1</span>, MAX) + cnt[MAX]) &#123;</span><br><span class="line">            MAX = a[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">c</span>(x + <span class="number">1</span>, y - <span class="number">1</span>, a[i]) + cnt[a[i]] == <span class="built_in">c</span>(x + <span class="number">1</span>, y - <span class="number">1</span>, MAX) + cnt[MAX] &amp;&amp; MAX &gt; a[i]) &#123;</span><br><span class="line">            MAX = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[x]; ++ i) &#123;</span><br><span class="line">        cnt[a[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[y]; i &lt;= r; ++ i) &#123;</span><br><span class="line">        cnt[a[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MAX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        b[++ cur] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>);</span><br><span class="line">    cur = std::<span class="built_in">unique</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        a[i] = std::<span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    num = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        st[i] = n / num * (i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        ed[i] = n / num * i;</span><br><span class="line">    &#125;</span><br><span class="line">    ed[num] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = st[i]; j &lt;= ed[i]; ++ j) &#123;</span><br><span class="line">            belong[j] = i;</span><br><span class="line">            ++ sum[i][a[j]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cur; ++ j) &#123;</span><br><span class="line">            sum[i][j] += sum[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= num; ++ j) &#123;</span><br><span class="line">            <span class="type">int</span> MAX = f[i][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = st[j]; k &lt;= ed[j]; ++ k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">c</span>(i, j, a[k]) &gt; <span class="built_in">c</span>(i, j, MAX)) &#123;</span><br><span class="line">                    MAX = a[k];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">c</span>(i, j, a[k]) == <span class="built_in">c</span>(i, j, MAX) &amp;&amp; MAX &gt; a[k]) &#123;</span><br><span class="line">                    MAX = a[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i][j] = MAX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        std::cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        l = ((l + lastans - <span class="number">1</span>) % n) + <span class="number">1</span>;</span><br><span class="line">        r = ((r + lastans - <span class="number">1</span>) % n) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; (lastans = b[<span class="built_in">calc</span>(l, r)]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><a href="https://www.luogu.com.cn/problem/P5048">P5048 [Ynoi2019 模拟赛] Yuno loves sqrt technology III</a></h1><h2 id="题意简述-7">题意简述</h2><p>区间查询众数出现次数，强制在线。</p><h2 id="思路-33">思路</h2><p>和蒲公英有异曲同工之妙，直接贴题解了2333，Ynoi的分块题太神了%</p><p><img src="/2022/08/19/%E5%88%86%E5%9D%97%E4%B9%A0%E9%A2%98%E9%9B%86/p1.png" alt="ynoiyyds"></p><h2 id="代码-43">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m, a[N], b[N], cur;</span><br><span class="line">std::vector&lt; <span class="type">int</span> &gt; pos[N];</span><br><span class="line"><span class="type">int</span> st[N], ed[N], belong[N], num;</span><br><span class="line"><span class="type">int</span> f[<span class="number">720</span>][<span class="number">720</span>], cnt[N], idx[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x = belong[l], y = belong[r], ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x == y) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++ i) &#123;</span><br><span class="line">            cnt[a[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++ i) &#123;</span><br><span class="line">            ans = std::<span class="built_in">max</span>(ans, ++cnt[a[i]]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ans = f[x + <span class="number">1</span>][y - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[x]; ++ i) &#123;</span><br><span class="line"><span class="keyword">while</span> (idx[i] + ans &lt; pos[a[i]].<span class="built_in">size</span>() &amp;&amp; pos[a[i]][idx[i] + ans] &lt;= r) &#123;</span><br><span class="line">            ++ ans;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = st[y]; i &lt;= r; ++ i) &#123;</span><br><span class="line"><span class="keyword">while</span> (idx[i] - ans &gt;= <span class="number">0</span> &amp;&amp; pos[a[i]][idx[i] - ans] &gt;= l) &#123;</span><br><span class="line">            ++ ans;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">std::cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">copy</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">std::<span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    cur = std::<span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">a[i] = std::<span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cur + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">pos[a[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">idx[i] = (<span class="type">int</span>)pos[a[i]].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line">st[i] = n / num * (i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">ed[i] = n / num * i;</span><br><span class="line">&#125;</span><br><span class="line">ed[num] = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++ i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = st[i]; j &lt;= ed[i]; ++ j) &#123;</span><br><span class="line">belong[j] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= num; ++ j) &#123;</span><br><span class="line">f[i][j] = f[i][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = st[j]; k &lt;= ed[j]; ++ k) &#123;</span><br><span class="line">f[i][j] = std::<span class="built_in">max</span>(f[i][j], ++ cnt[a[k]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">std::cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">l ^= lastans;</span><br><span class="line">r ^= lastans;</span><br><span class="line">std::cout &lt;&lt; (lastans = <span class="built_in">Query</span>(l, r)) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>to be continued…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022“杭电杯”中国大学生算法设计超级联赛（8）</title>
      <link href="/2022/08/12/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%888%EF%BC%89/"/>
      <url>/2022/08/12/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%888%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>被暴打了555，还是太菜了</p><h1>1001-Theramore</h1><h2 id="题目描述-10">题目描述</h2><p>给出一段<code>01</code>序列，可以操作若干次，每次操作可以将一段长度为偶数的子序列翻转，求最终能得到的字典序最小的序列。</p><h2 id="思路-12">思路</h2><p>贪心地将每个<code>1</code>放到后面奇偶性相同的地方</p><h2 id="代码-11">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        std::string s;</span><br><span class="line">        std::cin &gt;&gt; s;</span><br><span class="line">        <span class="type">int</span> odd = <span class="number">0</span>, even = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    ++ odd;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ++ even;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::vector&lt; <span class="type">char</span> &gt; <span class="title">ans</span><span class="params">(s.size(), <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) &amp;&amp; odd) &#123;</span><br><span class="line">                -- odd;</span><br><span class="line">                ans[i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!(i &amp; <span class="number">1</span>) &amp;&amp; even) &#123;</span><br><span class="line">                -- even;</span><br><span class="line">                ans[i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">            std::cout &lt;&lt; (<span class="type">char</span>)ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1005-Ironforge</h1><h2 id="题目描述-11">题目描述</h2><p>一开始有一个长度为 $n$ 的链，每个节点有一个点权 $a_i$ ，第 $i$ 和第 $i+1(1 \leq i \leq n - 1)$ 个节点之间有一条边权为 $b_i$ 的边。</p><p>若此时你处于第 $x$ 个节点，你会得到 $a_x$ 的所有质因子，你能通过第 $i$ 条边当且仅当你拥有 $b_i$ 这个质数。</p><p>有 $q$ 次询问，每次询问给出起点 $x$ 和终点 $y$ ，问是否能从 $x$ 走到 $y$ ，每条边和每个节点可以重复走。</p><h2 id="思路-13">思路</h2><p>这题求的是每个点能走的最大范围是多少。</p><p>首先从后往前遍历，若现在处于节点 $i$ 且 $i \rightarrow i+1$ 这条边能走通， 那么 $R_i = i + 1$ ，若 $i+1$ 还能向右拓展我们就继续让 $R_i=R_{i+1}$ ，一直这样，类似并查集的路径压缩。</p><p>然后从前往后遍历，若现在处于节点 $i$ ，$i-1$ 能向 $i$ 拓展且从 $i \backsim R_i$ 能走回到 $i-1$ ，就让 $R_i=R_{i-1},L_i=L_{i-1}$ ，若回不到 $i-1$ ，那么让 $L_i=i$。若 $i-1$ 不能向 $i$ 拓展，我们就暴力地左右跳到不能更新为止。</p><h2 id="代码-12">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; </span><br><span class="line">    T f = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)  &#123; </span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            f = <span class="number">-1</span>; </span><br><span class="line">            ch = <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    x= x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(x + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Arg &gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x, Arg &amp;...arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(arg...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Arg &gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(T &amp;x,Arg &amp;...arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">write</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">write</span>(arg...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> NUMBER_SIZE = <span class="number">2e5</span> + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> v[NUMBER_SIZE], pri[NUMBER_SIZE], tot;</span><br><span class="line">std::vector&lt; <span class="type">int</span> &gt; fac[NUMBER_SIZE];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pre_Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; NUMBER_SIZE; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">            v[i] = i;</span><br><span class="line">            pri[tot ++ ] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; tot &amp;&amp; <span class="number">1LL</span> * pri[j] * i &lt; NUMBER_SIZE; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pri[j] &gt; v[i]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v[pri[j] * i] = pri[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; NUMBER_SIZE; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; tot &amp;&amp; pri[j] &lt;= x; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % pri[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                fac[i].<span class="built_in">emplace_back</span>(pri[j]);</span><br><span class="line">                <span class="keyword">while</span> (x % pri[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    x /= pri[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, q, a[N], b[N], L[N], R[N];</span><br><span class="line">std::vector&lt; <span class="type">int</span> &gt; pos[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos[x].<span class="built_in">empty</span>() || pos[x].<span class="built_in">back</span>() &lt; l || pos[x].<span class="built_in">front</span>() &gt; r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">lower_bound</span>(<span class="built_in">begin</span>(pos[x]), <span class="built_in">end</span>(pos[x]), l) &lt;= r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) &#123;</span><br><span class="line">        pos[pri[i]].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x : fac[a[i]]) &#123;</span><br><span class="line">            pos[x].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; -- i) &#123;</span><br><span class="line">        R[i] = i;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; <span class="built_in">find</span>(b[R[i]], i, R[i])) &#123;</span><br><span class="line">            R[i] = R[R[i] + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; R[i - <span class="number">1</span>] &gt;= i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(b[i - <span class="number">1</span>], i, R[i])) &#123;</span><br><span class="line">                L[i] = L[i - <span class="number">1</span>];</span><br><span class="line">                R[i] = R[i - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                L[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L[i] = i;</span><br><span class="line">            <span class="type">bool</span> update;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                update = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">while</span> (R[i] &lt; n &amp;&amp; <span class="built_in">find</span>(b[R[i]], L[i], R[i])) &#123;</span><br><span class="line">                    update = <span class="literal">true</span>;</span><br><span class="line">                    R[i] = R[R[i] + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (L[i] &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">find</span>(b[L[i] - <span class="number">1</span>], L[i], R[i])) &#123;</span><br><span class="line">                    update = <span class="literal">true</span>;</span><br><span class="line">                    L[i] = L[L[i] - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (update);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">read</span>(x, y);</span><br><span class="line">        <span class="keyword">if</span> (L[x] &lt;= y &amp;&amp; R[x] &gt;= y) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Pre_Work</span>();</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1007-Darnassus</h1><h2 id="题目描述-12">题目描述</h2><p>给你 $n$ 个点，每个点的权值为 $a_i$  ，$i$ 和 $j$ 之间的边权为 $|i-j| \times|a_i-a_j|$ ，求这 $n$ 个点的最小生成树。</p><h2 id="思路-14">思路</h2><p>观察到 $mst$ 的最大边权不超过 $n-1$ ，那么 $|i-j|$ 和 $|a_i - a_j|$ 中至少有一个小于等于 $\sqrt n$ ，暴力找边即可。</p><h2 id="代码-13">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], pos[N];</span><br><span class="line"><span class="type">int</span> head[N], from[N * <span class="number">460</span>], to[N * <span class="number">460</span>], next[N * <span class="number">460</span>], cur;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    ++ cur;</span><br><span class="line">    from[cur] = u;</span><br><span class="line">    to[cur] = v;</span><br><span class="line">    next[cur] = head[x];</span><br><span class="line">    head[x] = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        pos[a[i]] = i;</span><br><span class="line">        head[i] = <span class="number">0</span>;</span><br><span class="line">        f[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= std::<span class="built_in">min</span>(i + m, n); ++ j) &#123;</span><br><span class="line">            LL k1 = <span class="number">1LL</span> * (j - i) * <span class="built_in">abs</span>(a[i] - a[j]);</span><br><span class="line">            <span class="keyword">if</span> (k1 &lt; n) &#123;</span><br><span class="line">                <span class="built_in">AddEdge</span>(k1, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">            LL k2 = <span class="number">1LL</span> * (j - i) * <span class="built_in">abs</span>(pos[i] - pos[j]);</span><br><span class="line">            <span class="keyword">if</span> (k2 &lt; n) &#123;</span><br><span class="line">                <span class="built_in">AddEdge</span>(k2, pos[i], pos[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> edge = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = head[i]; j; j = next[j]) &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">find</span>(from[j]), v = <span class="built_in">find</span>(to[j]);</span><br><span class="line">            <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">                ans += i;</span><br><span class="line">                f[u] = v;</span><br><span class="line">                ++ edge;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (edge == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (edge == n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1008-Orgrimmar</h1><h2 id="题目描述-13">题目描述</h2><p>给出一颗树，你可以从中选出一些点集，要求这些点集中每个点至多有一条边和它相连，最大化点集大小。</p><h2 id="思路-15">思路</h2><p>设 $f_{x,0}$ 为选了 <code>x</code> 且向下有一条连边的最大点集数， $f_{x,1}$ 为选了 <code>x</code> 但没有连边的最大点集数， $f_{x,2}$ 为不选 <code>x</code> 的最大点集数。</p><p>最后对根节点的三种方案取最大值即可</p><h2 id="代码-14">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    std::vector&lt; std::vector&lt; <span class="type">int</span> &gt; &gt; <span class="built_in">adj</span>(n), <span class="built_in">f</span>(n, std::<span class="built_in">vector</span>&lt; <span class="type">int</span> &gt;(<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        -- u;</span><br><span class="line">        -- v;</span><br><span class="line">        adj[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 0 选了有连接</span></span><br><span class="line">    <span class="comment">// 1 选了没连接</span></span><br><span class="line">    <span class="comment">// 2 不选</span></span><br><span class="line">    std::function&lt; <span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>) &gt; dfs = [&amp;](<span class="type">int</span> x, <span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        f[x][<span class="number">0</span>] = f[x][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(y, x);</span><br><span class="line">                mx = std::<span class="built_in">max</span>(mx, f[y][<span class="number">1</span>] - f[y][<span class="number">2</span>]);</span><br><span class="line">                sum += f[y][<span class="number">2</span>];</span><br><span class="line">                f[x][<span class="number">2</span>] += std::<span class="built_in">max</span>(&#123;f[y][<span class="number">0</span>], f[y][<span class="number">1</span>], f[y][<span class="number">2</span>]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[x][<span class="number">0</span>] += sum + mx;</span><br><span class="line">        f[x][<span class="number">1</span>] += sum;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    std::cout &lt;&lt; *std::<span class="built_in">max_element</span>(<span class="built_in">begin</span>(f[<span class="number">0</span>]), <span class="built_in">end</span>(f[<span class="number">0</span>])) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="number">512</span>&lt;&lt;<span class="number">20</span>)</span></span>; <span class="comment">// 512M</span></span><br><span class="line">    __asm__ ( <span class="string">&quot;movq %0, %%rsp\n&quot;</span>::<span class="string">&quot;r&quot;</span>((<span class="type">char</span>*)<span class="built_in">malloc</span>(size)+size));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022“杭电杯”中国大学生算法设计超级联赛（7）</title>
      <link href="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/"/>
      <url>/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>感觉这场自己发挥得还可以，切掉了 $1003、1004、1006$，队友开局秒切博弈，然后我也过了道签到，然后来到了赛中最高排名，好像是 $rk 30+$。</p><p>但是过掉 $1006$ 后发现 $1002$ 居然已经过了一百多个队，但是已经没时间了，而且大家都不想写了，心有余而力不足吧，最终 $rk207$。</p><p>对了，今天我换了一种代码风格，开始使用<code>std::</code>码风，感觉又变快乐了。</p><h1>1002-Independent Feedback Vertex Set</h1><h2 id="题目描述-5">题目描述</h2><p>给你一个由三元环组成的图，每个点都有一个权值。你可以选择一些点，并且选择的点两两之间没有直接相连的边，最大化选择点的点权和。</p><h2 id="思路-7">思路</h2><p>？？？题目一解读完感觉就是道水题，难怪最后过了这么多，只能怪在 $1006$ 耗太多时间了。</p><p>由于只含有三元环，我们对每个点染色，来张图感性地认识一下。</p><p><img src="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/p8.png" alt="graph (3)"></p><p>若选择 $3$ ，我们发现没有别的点可选。</p><p>若选择 $1$ ，我们可以选择同为标上 $3$ 的 $7,4$。</p><p>若选择 $2$ ，我们可以选择同为标上 $2$ 的 $5,6$。</p><p>我们发现我们的选择只有三种，即三种颜色的节点集，最后计算每个颜色集的权值和，取最大值即可。</p><h2 id="代码-7">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="function">std::vector&lt; <span class="type">int</span> &gt; <span class="title">v</span><span class="params">(n)</span>, <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        std::cin &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    c[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    c[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    c[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        -- u;</span><br><span class="line">        -- v;</span><br><span class="line">        c[i] = <span class="number">3</span> - c[u] - c[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt; LL &gt; <span class="title">mx</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        mx[c[i]] += v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::<span class="built_in">max</span>(&#123;mx[<span class="number">0</span>], mx[<span class="number">1</span>], mx[<span class="number">2</span>]&#125;) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1003-Counting Stickmen</h1><h2 id="题目描述-6">题目描述</h2><p>给出一颗树，计算树中&quot;火柴人&quot;的个数。</p><p><img src="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/p1.png" alt="截屏2022-08-09 18.10.06"></p><p>如图，$2$ 是火柴人的头，$(3,5)$ 是身子，$(4,6)(9,10)$ 是两条胳膊，$(5,7),(5,8)$ 是两条腿。</p><h2 id="思路-8">思路</h2><p>我们暂且把它当做根节点为 $1$ 的树，枚举每个节点作为上图中 $3$ 位置的火柴人个数。</p><p>我们发现，火柴人的形态分为 $3$ 种。</p><p><img src="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/p5.png" alt="graph"></p><p>这种我称为正常形态。</p><p><img src="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/p3.png" alt="graph (1)"></p><p>这种我称为头脚互换形态。</p><p><img src="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/p4.png" alt="graph (2)"></p><p>这种我称为头手互换形态。</p><p>然后对这三种形态分别计数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assume -MOD &lt;= x &lt; 2MOD</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x += MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= MOD) &#123;</span><br><span class="line">        x -= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">power</span><span class="params">(T a, LL b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Mint</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Mint</span>(<span class="type">int</span> x = <span class="number">0</span>) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x)) &#123;&#125;</span><br><span class="line">    <span class="built_in">Mint</span>(LL x) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x % MOD)) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(<span class="built_in">norm</span>(MOD - x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, MOD - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Mint &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">LL</span>(x) * rhs.x % MOD;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Mint &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Mint &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> Mint &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>*(<span class="type">const</span> Mint &amp;lhs, <span class="type">const</span> Mint &amp;rhs) &#123;</span><br><span class="line">        Mint res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>+(<span class="type">const</span> Mint &amp;lhs, <span class="type">const</span> Mint &amp;rhs) &#123;</span><br><span class="line">        Mint res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>-(<span class="type">const</span> Mint &amp;lhs, <span class="type">const</span> Mint &amp;rhs) &#123;</span><br><span class="line">        Mint res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>/(<span class="type">const</span> Mint &amp;lhs, <span class="type">const</span> Mint &amp;rhs) &#123;</span><br><span class="line">        Mint res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, Mint &amp;a) &#123;</span><br><span class="line">        LL v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">Mint</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> Mint &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Mint inv[N], fac[N], finv[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pre_Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; ++ i) &#123;</span><br><span class="line">        fac[i] = fac[i<span class="number">-1</span>] * i;</span><br><span class="line">        inv[i] = MOD - MOD / i * inv[MOD % i];</span><br><span class="line">        finv[i] = finv[i - <span class="number">1</span>] * inv[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mint <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fac[x] * finv[x - y] * finv[y];</span><br><span class="line">&#125;</span><br><span class="line">std::vector&lt; <span class="type">int</span> &gt; adj[N];</span><br><span class="line">Mint ans[N];</span><br><span class="line"><span class="type">int</span> son[N], fa[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    fa[x] = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            ++ son[x];</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    fa[x] = p;</span><br><span class="line">    Mint siz = <span class="number">0</span>, all = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs2</span>(y, x);</span><br><span class="line">            <span class="keyword">if</span> (son[y] &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                ++ cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            siz += son[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[x] &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">                all += (Mint)(<span class="number">1LL</span> * (siz - son[y]) * son[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    all /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (son[x] &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">                <span class="keyword">if</span> (son[y] &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    ans[x] += (all - (son[y] * (siz - son[y]))) * <span class="built_in">C</span>(son[y], <span class="number">2</span>) * <span class="built_in">C</span>((fa[x] ? <span class="number">1</span> : <span class="number">0</span>) + son[x] - <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">                    ans[x] += <span class="built_in">C</span>(son[y], <span class="number">2</span>) * (siz - son[y]) * <span class="built_in">C</span>(son[p] - <span class="number">1</span> + (fa[p] ? <span class="number">1</span> : <span class="number">0</span>), <span class="number">1</span>) * <span class="built_in">C</span>(son[x] - <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[x] += <span class="built_in">C</span>(son[p] - <span class="number">1</span> + (fa[p] ? <span class="number">1</span> : <span class="number">0</span>), <span class="number">2</span>) * all * <span class="built_in">C</span>(son[x] - <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        ans[i] = <span class="number">0</span>;</span><br><span class="line">        son[i] = fa[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    Mint res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        res += ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre_Work</span>();</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1004-Black Magic</h1><h2 id="题目描述-7">题目描述</h2><p>我们定义每块砖都有左右两块区域，假设 $x$ 和 $y$ 是两块相邻的砖，若 $x$ 的右半边和 $y$ 的左边边都是黑色时，它俩就能合并为同一块。</p><p>给你 $E$ 块左右都为白色的砖，$L$ 块左边为黑色右边为白色的砖，$R$ 块右边为黑色左边为白色的砖，$B$ 块左右都为黑色的砖，求最终能得到的最少的砖块数和最多的砖块数。</p><h2 id="思路-9">思路</h2><p>最少的情况很显然，就是左边为白右边为黑的和左边为黑右边为白的砖结合，然后把全黑的砖随便插在这俩中间。</p><p>最多的情况也很显然，就是左边摆 左黑右边，右边摆 左白右黑，中间将全黑和全白错排。</p><h2 id="代码-8">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        LL E, L, R, B;</span><br><span class="line">        std::cin &gt;&gt; E &gt;&gt; L &gt;&gt; R &gt;&gt; B;</span><br><span class="line">        LL ans_min = E + std::<span class="built_in">max</span>(L, R) + (L == <span class="number">0</span> &amp;&amp; R == <span class="number">0</span> ? B ? <span class="number">1</span> : <span class="number">0</span> : <span class="number">0</span>);</span><br><span class="line">        LL ans_max = L + R + (E &gt;= B - <span class="number">1</span> ? E + B : E * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        std::cout &lt;&lt; ans_min &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ans_max &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1006-Sumire</h1><h2 id="题目描述-8">题目描述</h2><p>我们定义 $f^k(B,x, d)$ 代表 $B$ 进制的 $x$ 中数字 $d$ 出现次数的 $k$ 次方。</p><p>给出 $k,B,d,l,r$ 求 $\sum_{i=l}^{r} f^{k}(B,i,d)$。</p><h2 id="思路-10">思路</h2><p>一眼数位 $dp$ ，但是直接写会 $TLE$ ，我们观察到从 $0$ 到 $res$ 会计算很多重复的值，我们从这里为切入点来进行优化。<img src="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/p6.png" alt="截屏2022-08-09 18.37.19"></p><p>这里还是放官方题解的说法，感觉脑子想清楚了，但是嘴巴说不清楚。</p><p><img src="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/p7.png" alt="截屏2022-08-09 18.38.24"></p><p>于是赛中写了 $50$ 行的分类讨论，我称为分类讨论贵物，好在最后 $20min$ 过掉了。</p><h2 id="代码-9">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> LL N = <span class="number">100</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL</span></span><br><span class="line"><span class="function">LL <span class="title">ksm</span><span class="params">(LL x, LL y, LL res = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % MOD) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::vector&lt; <span class="type">int</span> &gt; <span class="title">Trans</span><span class="params">(LL x, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    std::vector&lt; <span class="type">int</span> &gt; ans;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(x % b);</span><br><span class="line">        x /= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k, B, d, a[N], cnt;</span><br><span class="line">LL dp[N][N][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> cnt, <span class="type">bool</span> lead, <span class="type">bool</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ksm</span>(cnt, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (~dp[pos][cnt][lead][limit]) &#123;</span><br><span class="line">        <span class="keyword">return</span> dp[pos][cnt][lead][limit];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = limit ? a[pos] : B - <span class="number">1</span>;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    LL num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (lead) &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        ans += <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt, <span class="literal">true</span>, limit &amp;&amp; (<span class="number">0</span> == a[pos]));</span><br><span class="line">        ans %= MOD;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == a[pos]) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (d != <span class="number">0</span> &amp;&amp; d &lt;= res) &#123;</span><br><span class="line">            ans += <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt + <span class="number">1</span>, <span class="literal">false</span>, limit &amp;&amp; (d == a[pos]));</span><br><span class="line">            ans %= MOD;</span><br><span class="line">            <span class="keyword">if</span> (d == a[pos]) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            ans += (res + <span class="number">1</span> - num) * <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt, <span class="literal">false</span>, <span class="literal">false</span>) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[pos] &lt;= res) &#123;</span><br><span class="line">                ans += <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt, <span class="literal">false</span>, limit);</span><br><span class="line">                num += <span class="number">1</span>;</span><br><span class="line">                ans %= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += (res + <span class="number">1</span> - num) * <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt, <span class="literal">false</span>, <span class="literal">false</span>) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (d &lt;= res) &#123;</span><br><span class="line">            num += <span class="number">1</span>;</span><br><span class="line">            ans += <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt + <span class="number">1</span>, <span class="literal">false</span>, limit &amp;&amp; (d == a[pos]));</span><br><span class="line">            ans %= MOD;</span><br><span class="line">            <span class="keyword">if</span> (d == a[pos]) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            ans += (res + <span class="number">1</span> - num) * <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[pos] &lt;= res) &#123;</span><br><span class="line">                ans += <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt, <span class="literal">false</span>, limit);</span><br><span class="line">                num += <span class="number">1</span>;</span><br><span class="line">                ans %= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += (res + <span class="number">1</span> - num) * <span class="built_in">dfs</span>(pos - <span class="number">1</span>, cnt, <span class="literal">false</span>, <span class="literal">false</span>) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[pos][cnt][lead][limit] = (ans % MOD + MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">calc</span><span class="params">(std::vector&lt; <span class="type">int</span> &gt; x)</span> </span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; x.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">        a[++ cnt] = x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(cnt, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LL l, r;</span><br><span class="line">    std::cin &gt;&gt; k &gt;&gt; B &gt;&gt; d &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    -- l;</span><br><span class="line">    std::vector&lt; <span class="type">int</span> &gt; L = <span class="built_in">Trans</span>(l, B), R = <span class="built_in">Trans</span>(r, B);</span><br><span class="line">    LL ans = (<span class="built_in">calc</span>(R) - <span class="built_in">calc</span>(L)) % MOD;</span><br><span class="line">    std::cout &lt;&lt; (ans % MOD + MOD) % MOD &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1008-Triangle Game</h1><h2 id="题目描述-9">题目描述</h2><p>给出三角形的三条边，每个回合都必须选择一条边减去一个正整数但是必须保证减去后还能构成一个三角形，不能操作者输掉比赛。</p><h2 id="思路-11">思路</h2><p>受到昨天牛客多校的启发，每条边长度肯定要至少为 $1$ ，异或和不为 $0$ 则先手赢。</p><p>证明还是得看官方题解</p><p><img src="/2022/08/09/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%887%EF%BC%89/p2.png" alt="截屏2022-08-09 18.59.54"></p><h2 id="代码-10">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        -- a;</span><br><span class="line">        -- b;</span><br><span class="line">        -- c;</span><br><span class="line">        std::cout &lt;&lt; ((a ^ b ^ c) == <span class="number">0</span> ? <span class="string">&quot;Lose&quot;</span> : <span class="string">&quot;Win&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 263个人题解</title>
      <link href="/2022/08/07/AtCoder-Beginner-Contest-263%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/08/07/AtCoder-Beginner-Contest-263%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>今天生日上大分，${\color{red}win}$！</p><p>虽然没做出来期望 $dp$ 题，但是最后三分钟极限过了道网络流，罚时很逆天！</p><p><img src="/2022/08/07/AtCoder-Beginner-Contest-263%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/263_2.png" alt="截屏2022-08-06 23.35.43"></p><h1><strong>A - Full House</strong></h1><h2 id="题目描述-14">题目描述</h2><p>给出 $5$ 个数，判断是否可以分成 $3$ 个一样的和 $2$ 个一样的。</p><h2 id="思路-16">思路</h2><p>暴力。</p><p>题目意思看瓢了， $wa$了 $3$ 发。</p><h2 id="代码-26">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line">    map&lt; <span class="type">int</span>, <span class="type">int</span> &gt; cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        ++ cnt[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (cnt[a[i]] == <span class="number">3</span> &amp;&amp; cnt[a[j]] == <span class="number">2</span>) &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><strong>B - Ancestor</strong></h1><h2 id="题目描述-15">题目描述</h2><p>给出以 $1$ 为根节点的树， 计算 $1$ 到 $n$ 的距离。</p><h2 id="思路-17">思路</h2><p>暴力</p><h2 id="代码-27">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">d</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        d[i] = d[x] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[n] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><strong>C - Monotonically Increasing</strong></h1><h2 id="题目描述-16">题目描述</h2><p>求出所有严格递增的且长度为 $m$ ，值域为 $[1, n]$ 的数列。</p><h2 id="思路-18">思路</h2><p>就暴力？最开始接触的 $dfs$。</p><h2 id="代码-28">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">            cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == m];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        a[cnt + <span class="number">1</span>] = i;</span><br><span class="line">        <span class="built_in">dfs</span>(i, cnt + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">swap</span>(n, m);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><strong>D - Left Right Operation</strong></h1><h2 id="题目描述-17">题目描述</h2><p>一个长度为 $n$ 的序列，允许你进行若干次如下操作</p><ul><li>选择一个数 $x$ ，将 $a_1,a_2, \cdots ,a_{1+x-1}$ 全部置为 <code>L</code></li><li>选择一个数 $y$ ，将 $a_{n-y+1}, \cdots ,a_{n-1},a_n$ 全部置为 <code>R</code></li></ul><p>求最终 $\sum_{1}^{n}a_i$ 的最小值。</p><h2 id="思路-19">思路</h2><p>一开始想的贪心，错了几次之后改为 $dp$ 了。</p><p>设 $f_{i,0}$ 为 $a_i$ 不变为 <code>L</code> 时的前缀最小值，相应的 $f_{i,1}$ 为 $a_i$ 变为 <code>L</code> 时的前缀最小值。</p><p>设 $g_{i,0}$ 为 $a_i$ 不变为 <code>R</code> 时的后缀最小值，相应的 $g_{i,1}$  为 $a_i$ 变为 <code>R</code> 时的后缀最小值。</p><p>最后我们枚举中间点，将四个状态取最小值即可。</p><h2 id="代码-29">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, L, R, a[N];</span><br><span class="line">LL dp[N][<span class="number">2</span>], sum[N], fdp[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; L &gt;&gt; R;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i][<span class="number">1</span>] = <span class="number">1e18</span>;</span><br><span class="line">        fdp[i][<span class="number">0</span>] = fdp[i][<span class="number">1</span>] = <span class="number">1e18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="built_in">min</span>(&#123;dp[i - <span class="number">1</span>][<span class="number">0</span>] + a[i], dp[i - <span class="number">1</span>][<span class="number">1</span>] + L&#125;);</span><br><span class="line">        dp[i][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">1</span>] + L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; -- i) &#123;</span><br><span class="line">        fdp[i][<span class="number">0</span>] = <span class="built_in">min</span>(&#123;fdp[i + <span class="number">1</span>][<span class="number">0</span>] + a[i], fdp[i + <span class="number">1</span>][<span class="number">1</span>] + R&#125;);</span><br><span class="line">        fdp[i][<span class="number">1</span>] = fdp[i + <span class="number">1</span>][<span class="number">1</span>] + R;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(&#123;ans, dp[i][<span class="number">0</span>] + fdp[i + <span class="number">1</span>][<span class="number">0</span>], dp[i][<span class="number">0</span>] + fdp[i + <span class="number">1</span>][<span class="number">1</span>], dp[i][<span class="number">1</span>] + fdp[i + <span class="number">1</span>][<span class="number">0</span>], dp[i][<span class="number">1</span>] + fdp[i + <span class="number">1</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><strong>E - Sugoroku 3</strong></h1><h2 id="题目描述-18">题目描述</h2><p>起点为 $1$，当你目前处于 $x(1\leq x \leq n - 1)$ 时，你会等概率地停留在原地或者到达 $x+y(1\leq y \leq A_i)$ ，求到达 $n$ 点的期望步数。</p><h2 id="思路-20">思路</h2><p>我们令 $dp_i$ 代表从 $i$ 走到 $n$ 的期望步数，$dp_n=0$。</p><p>那么 $dp_i = \frac { 1 + \sum_{j=1}^{A_i} dp_{i+j}} {A_i} + 1$。等式上方的 <code>1</code> 代表停留在原地不会走，但是步数增加了 <code>1</code>。</p><p>求和随便用啥来维护都可以。</p><h2 id="代码-30">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N], dp[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FenWick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; c;</span><br><span class="line">    <span class="built_in">FenWick</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">c</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            c[i] += d;</span><br><span class="line">            c[i] %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(l, d);</span><br><span class="line">        <span class="built_in">add</span>(r + <span class="number">1</span>, -d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i; i -= i &amp; -i) &#123;</span><br><span class="line">            sum += c[i];</span><br><span class="line">            sum %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">get</span>(r) - <span class="built_in">get</span>(l - <span class="number">1</span>) + MOD) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">LL <span class="title">ksm</span><span class="params">(LL x, LL y, LL res = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % MOD) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">FenWick <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; -- i) &#123;</span><br><span class="line">        dp[i] = (<span class="number">1</span> + (d.<span class="built_in">get</span>(i + <span class="number">1</span>, i + a[i]) + <span class="number">1</span>) % MOD * <span class="built_in">ksm</span>(a[i], MOD - <span class="number">2</span>) % MOD) % MOD;</span><br><span class="line">        d.<span class="built_in">add</span>(i, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><strong>F - Tournament</strong></h1><h2 id="题目描述-19">题目描述</h2><p>有 $2^n$ 个人打比赛， 我们设当前场上还剩下 $2m $ 个人 ，那么第 $2i - 1$ 个人与第 $2i$ 个人比赛。比赛胜利者晋级到下一轮，一共进行 $n$ 轮比赛。</p><p>设 $C_{i,j}$ 为第 $i$ 个人赢 $j$ 轮能得到的收益，求所有人得到收益的总和的最大值。</p><h2 id="思路-21">思路</h2><p>可以看出比赛过程构成了一颗深度为 $n + 1$ 的满二叉树，其中最后一层为 $1 \backsim 2^n$ 。</p><p>我们不妨从根节点出发，枚举左子树或者右子树胜利的最大收益，设 $dp_{i,j}$ 为枚举到第 $i$ 个人连赢 $j$ 场能得到的最大收益，当枚举到最后一层也就是叶子结点时，我们便能得知每个人的胜场情况。</p><h2 id="代码-31">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">17</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, c[<span class="number">1</span> &lt;&lt; N][N];</span><br><span class="line">LL dp[<span class="number">1</span> &lt;&lt; N][N];</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> win)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &lt;&lt; n) &#123;</span><br><span class="line">        <span class="keyword">return</span> c[x ^ (<span class="number">1</span> &lt;&lt; n)][win];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (~dp[x][win]) &#123;</span><br><span class="line">        <span class="keyword">return</span> dp[x][win];</span><br><span class="line">    &#125;</span><br><span class="line">    LL lwin = <span class="built_in">dfs</span>(x &lt;&lt; <span class="number">1</span>, win + <span class="number">1</span>) + <span class="built_in">dfs</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    LL rwin = <span class="built_in">dfs</span>(x &lt;&lt; <span class="number">1</span>, <span class="number">0</span>) + <span class="built_in">dfs</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, win + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> dp[x][win] = <span class="built_in">max</span>(lwin, rwin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j) &#123;</span><br><span class="line">            cin &gt;&gt; c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><strong>G - Erasing Prime Pairs</strong></h1><h2 id="题目描述-20">题目描述</h2><p>给出 $n$ 种不同的数 $a_i$ ，以及每个 $a_i$ 的个数 $b_i$ 。</p><p>你每次都能拿出两个数$x \ y$ ，当 $x+y$ 为质数时，你可以将它们消除。</p><p>求能消除的最大对数。</p><h2 id="思路-22">思路</h2><p>一眼网络流，但是在建图上挂了几次，这题的核心在于处理 $1$ 的归属问题，$1$ 可以和自身匹配构成 $2$ ，或者和其他的偶数构成一个质数。</p><p>我一开始按照奇数和偶数建图，把 $1$ 单独拿出来，然后跑 $Dinic$ ，但是发现这样不能使答案最优。</p><p>然后我考虑拆点跑最大流，这样就把这些限制因素给排除了，最后输出答案的一半即可。</p><p>很刺激，最后 $3 \min$ 过掉了。</p><h2 id="代码-32">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300</span>, INF = <span class="number">1e12</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, cap, flow;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f) : <span class="built_in">from</span>(u), <span class="built_in">to</span>(v), <span class="built_in">cap</span>(c), <span class="built_in">flow</span>(f) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m, S, T;</span><br><span class="line">    vector&lt; Edge &gt; edges;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; G[N];</span><br><span class="line">    <span class="type">int</span> d[N], cur[N];</span><br><span class="line">    <span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Dinic</span>(<span class="type">int</span> S, <span class="type">int</span> T) : <span class="built_in">S</span>(S), <span class="built_in">T</span>(T) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cap)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(from, to, cap, <span class="number">0</span>));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        m = edges.<span class="built_in">size</span>();</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(m - <span class="number">2</span>);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">        Q.<span class="built_in">push</span>(S);</span><br><span class="line">        d[T] = <span class="number">0</span>;</span><br><span class="line">        vis[S] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = Q.<span class="built_in">front</span>();</span><br><span class="line">            Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">                Edge&amp; e = edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span> (!vis[e.to] &amp;&amp; e.cap &gt; e.flow) &#123;</span><br><span class="line">                    vis[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    d[e.to] = d[x] + <span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[T];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == T || a == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>, f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; i = cur[x]; i &lt; G[x].<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">            Edge&amp; e = edges[G[x][i]];</span><br><span class="line">            <span class="keyword">if</span> (d[x] + <span class="number">1</span> == d[e.to] &amp;&amp; (f = <span class="built_in">DFS</span>(e.to, <span class="built_in">min</span>(a, e.cap - e.flow))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                e.flow += f;</span><br><span class="line">                edges[G[x][i] ^ <span class="number">1</span>].flow -= f;</span><br><span class="line">                flow += f;</span><br><span class="line">                a -= f;</span><br><span class="line">                <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Maxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">BFS</span>()) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">DFS</span>(S, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> v[<span class="number">30000005</span>], prime[<span class="number">30000005</span>], tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">30000000</span>; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">            v[i] = i;</span><br><span class="line">            prime[++ tot] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; <span class="number">1LL</span> * prime[j] * i &lt;= <span class="number">30000000</span>; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prime[j] &gt; v[i]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v[prime[j] * i] = prime[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; a[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pre</span>();</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        a[i] = &#123;x, y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Dinic <span class="title">d</span><span class="params">(<span class="number">0</span>, <span class="number">250</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        d.<span class="built_in">AddEdge</span>(<span class="number">0</span>, i, a[i].second);</span><br><span class="line">        d.<span class="built_in">AddEdge</span>(i + n, <span class="number">250</span>, a[i].second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[a[i].first + a[j].first] == a[i].first + a[j].first) &#123;</span><br><span class="line">                d.<span class="built_in">AddEdge</span>(i, j + n, INF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d.<span class="built_in">Maxflow</span>() / <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> atcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandaemonium Asphodelos/ The First Circle (Savage)（珂朵莉树+动态开点）</title>
      <link href="/2022/08/05/Pandaemonium-Asphodelos-The-First-Circle-Savage-%EF%BC%88%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91-%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9%EF%BC%89/"/>
      <url>/2022/08/05/Pandaemonium-Asphodelos-The-First-Circle-Savage-%EF%BC%88%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91-%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://acm.hdu.edu.cn/showproblem.php?pid=7185">Problem - 7185 (hdu.edu.cn)</a></p><p>$hdu$ 不支持结构化绑定，悲（</p><h1>题目描述</h1><p>给定 $n$ 个砖块，每个砖块初始权值为 $0$ ，颜色相同， $q$ 次操作。</p><ul><li>操作 $1$ ，选取一段区间$[l,r]$，让其染上新的未出现过的颜色</li><li>操作 $2$ ，将第 $x$ 块砖的颜色染到第 $y$ 块砖所在的连通块上（与第 $y$ 块砖相连且颜色相同）</li><li>操作 $3$ ，将与第 $x$ 块砖颜色相同的砖的权值增加 $v$</li><li>操作 $4$ ，查询第 $x$ 块砖的权值</li></ul><h1>思路</h1><p>首先 $3 \leq n \leq 10^8$ 就直接限制了很多做法，注意到 $q \leq 10^5$，我们染上的颜色数最多也就 $q$ 个，操作的区间最多也就 $q$ 个。</p><p>我们考虑用珂朵莉树来维护所有的区间以及该区间的颜色，并且颜色相同且相邻的区间我们要将它们合并成一个区间，对应了操作 $2$ 里的最大连通块。对于操作 $1$ ，我们直接将 $[l,r]$ 进行分裂，然后再将这个区间存入珂朵莉树。我们再用一个数组 $col$ 来记录每个颜色的增量，并用动态开点线段树来维护每个点的权值。对于操作 $2$ 里的染色操作，我们将 $y$ 这一整个连通块的权值增加 $col_y - col_x$ ，意为将原先 $y$ 已经产生的增量加上，因为之后的颜色就变成 $x$ 的颜色了，不再需要这个增量了，然后将之前 $x$ 产生的增量减去，表示染色之后的 $y$ 的连通块对于 $x$ 的颜色的增量为 $-col_x$ ，互不相欠嘛。对于操作 $3$ ，我们直接将 $x$ 所属的颜色的增量 $col+v$ 。对于操作 $4$ ，查询线段树上对应的 $x$ 位置的权值加上 $x$ 所属的颜色增量即可。</p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">int</span> ls[N &lt;&lt; <span class="number">6</span>], rs[N &lt;&lt; <span class="number">6</span>], tot, rt;</span><br><span class="line">LL sum[N &lt;&lt; <span class="number">6</span>], lz[N &lt;&lt; <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!lz[x]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ls[x]) &#123;</span><br><span class="line">        ls[x] = ++ tot;</span><br><span class="line">    &#125;</span><br><span class="line">    sum[ls[x]] += lz[x];</span><br><span class="line">    lz[ls[x]] += lz[x];</span><br><span class="line">    <span class="keyword">if</span> (!rs[x]) &#123;</span><br><span class="line">        rs[x] = ++ tot;</span><br><span class="line">    &#125;</span><br><span class="line">    sum[rs[x]] += lz[x];</span><br><span class="line">    lz[rs[x]] += lz[x];</span><br><span class="line">    lz[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, LL v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt; qr || ql &gt; r || qr &lt; l) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">        x = ++ tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        sum[x] += v;</span><br><span class="line">        lz[x] += v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(x);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">modify</span>(ls[x], l, mid, ql, qr, v);</span><br><span class="line">    <span class="built_in">modify</span>(rs[x], mid + <span class="number">1</span>, r, ql, qr, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(x);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(ls[x], l, mid, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(rs[x], mid + <span class="number">1</span>, r, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> v;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &lt; o.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt; Node &gt; odt;</span><br><span class="line">LL col[N];</span><br><span class="line">set&lt; Node &gt;::<span class="function">iterator <span class="title">split</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; n) &#123;</span><br><span class="line">        <span class="keyword">return</span> odt.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">prev</span>(odt.<span class="built_in">upper_bound</span>(&#123;x, <span class="number">0</span>, <span class="number">0</span>&#125;));</span><br><span class="line">    <span class="keyword">if</span> (it-&gt;l == x) &#123;</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//auto [l, r, v] = *it;</span></span><br><span class="line">    <span class="type">int</span> l = it-&gt;l, r = it-&gt;r, v = it-&gt;v;</span><br><span class="line">    odt.<span class="built_in">erase</span>(it);</span><br><span class="line">    odt.<span class="built_in">insert</span>(&#123;l, x - <span class="number">1</span>, v&#125;);</span><br><span class="line">    <span class="keyword">return</span> odt.<span class="built_in">insert</span>(&#123;x, r, v&#125;).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> R = <span class="built_in">split</span>(r + <span class="number">1</span>), L = <span class="built_in">split</span>(l);</span><br><span class="line">    <span class="keyword">while</span> (L != odt.<span class="built_in">begin</span>() &amp;&amp; <span class="built_in">prev</span>(L)-&gt;v == v) &#123;</span><br><span class="line">        L = <span class="built_in">prev</span>(L);</span><br><span class="line">        l = L-&gt;l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (R != odt.<span class="built_in">end</span>() &amp;&amp; R-&gt;v == v) &#123;</span><br><span class="line">        r = R-&gt;r;</span><br><span class="line">        R = <span class="built_in">next</span>(R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x = L; x != R; ++ x) &#123;</span><br><span class="line">        <span class="built_in">modify</span>(rt, <span class="number">1</span>, n, x-&gt;l, x-&gt;r, col[x-&gt;v] - col[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    odt.<span class="built_in">erase</span>(L, R);</span><br><span class="line">    odt.<span class="built_in">insert</span>(&#123;l, r, v&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++ i) &#123;</span><br><span class="line">        ls[i] = rs[i] = sum[i] = lz[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tot = rt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fill</span>(col, col + q + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    odt.<span class="built_in">clear</span>();</span><br><span class="line">    odt.<span class="built_in">insert</span>(&#123;<span class="number">1</span>, n, <span class="number">0</span>&#125;);</span><br><span class="line">    LL lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> op, x, y, c, v;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">            x = ((x - <span class="number">1</span>) ^ lastans) % n + <span class="number">1</span>;</span><br><span class="line">            c = ((c - <span class="number">1</span>) ^ lastans) % ((n - <span class="number">1</span>) / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">max</span>(<span class="number">1</span>, x - c), r = l + <span class="number">2</span> * c;</span><br><span class="line">            <span class="keyword">if</span> (r &gt; n) &#123;</span><br><span class="line">                l = n - c * <span class="number">2</span>, r = n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">assign</span>(l, r, i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            x = ((x - <span class="number">1</span>) ^ lastans) % n + <span class="number">1</span>;</span><br><span class="line">            y = ((y - <span class="number">1</span>) ^ lastans) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">auto</span> fx = <span class="built_in">prev</span>(odt.<span class="built_in">upper_bound</span>(&#123;x, <span class="number">0</span>, <span class="number">0</span>&#125;)), fy = <span class="built_in">prev</span>(odt.<span class="built_in">upper_bound</span>(&#123;y, <span class="number">0</span>, <span class="number">0</span>&#125;));</span><br><span class="line">            <span class="keyword">if</span> (fx-&gt;v != fy-&gt;v) &#123;</span><br><span class="line">                <span class="built_in">assign</span>(fy-&gt;l, fy-&gt;r, fx-&gt;v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; v;</span><br><span class="line">            x = ((x - <span class="number">1</span>) ^ lastans) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">auto</span> fx = <span class="built_in">prev</span>(odt.<span class="built_in">upper_bound</span>(&#123;x, <span class="number">0</span>, <span class="number">0</span>&#125;));</span><br><span class="line">            col[fx-&gt;v] += v;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            x = ((x - <span class="number">1</span>) ^ lastans) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">auto</span> fx = <span class="built_in">prev</span>(odt.<span class="built_in">upper_bound</span>(&#123;x, <span class="number">0</span>, <span class="number">0</span>&#125;));</span><br><span class="line">            cout &lt;&lt; (lastans = <span class="built_in">query</span>(rt, <span class="number">1</span>, n, x) + col[fx-&gt;v]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            lastans &amp;= <span class="number">1073741823</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 补题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022“杭电杯”中国大学生算法设计超级联赛（6）</title>
      <link href="/2022/08/04/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%886%EF%BC%89/"/>
      <url>/2022/08/04/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%886%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这场我们队发挥得还不错，最终$rk131$，还得到了教练的表扬(</p><p>浅录一下由我码的几个题</p><h1>1006-Maex</h1><h2 id="题目描述">题目描述</h2><p>给出以$1$为根的树，你可以给每个点赋不同的值，我们定义该点的贡献为以这个点为根节点的子树内的$MEX$（最小未出现过的数），求所有节点贡献和的最大值。</p><h2 id="思路-3">思路</h2><p>$dp_x$代表以$x$为根节点的子树最大贡献和。</p><h2 id="代码-3">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; adj[N];</span><br><span class="line"><span class="type">int</span> num, siz[N];</span><br><span class="line">LL dp[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">            siz[x] += siz[y];</span><br><span class="line">            dp[x] = <span class="built_in">max</span>(dp[x], dp[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[x] += siz[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        siz[i] = dp[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; dp[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1007-Shinobu loves trip</h1><h2 id="题目描述-2">题目描述</h2><p>有$n$条旅游路线，每条路线有一个起点$s$以及旅行天数$d$，一开始在起点，第$i$天在$s + a \times d \mod p$。</p><p>$q$次询问，每次询问有多少条路线会经过$x$。</p><h2 id="思路-4">思路</h2><p>若第 $i$ 条路线经过 $x$ ，那么满足 $s_i + a^k \mod p \equiv x$，移项得 $a^k \mod p \equiv \frac {x}{s_i} \mod p$。也就是说存在 $0 \leq k \leq d_i$ 满足前面的等式。</p><p>我们可以预处理出 $a^i \mod p$ 最先出现的 $i$，然后查询时我们对每一条路线询问 $\frac{x}{s_i} \mod p$ 最早出现时间是否 $\leq d_i$。</p><p>注意，若起点为 $0$ 的话，整条路线都是重复在走 $0$ 这个点，所以我们要特判一下。</p><h2 id="代码-4">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1005</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p, a, n, q;</span><br><span class="line"><span class="type">int</span> s[N], d[N], inv[N];</span><br><span class="line"><span class="function">LL <span class="title">ksm</span><span class="params">(LL x, LL y, LL P)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = x * x % P) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; a &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    unordered_map&lt; <span class="type">int</span>, <span class="type">int</span> &gt; fir;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x = <span class="number">1</span>; i &lt;= <span class="number">200005</span>; ++ i, x = (LL)x * a % p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!fir[x]) &#123;</span><br><span class="line">            fir[x] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; s[i] &gt;&gt; d[i];</span><br><span class="line">        ++ d[i];</span><br><span class="line">        inv[i] = <span class="built_in">ksm</span>(s[i], p - <span class="number">2</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x, ans = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>( x == <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">                <span class="keyword">if</span>( s[i] == <span class="number">0</span> ) ++ ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">                <span class="type">int</span> pos = (LL)x * inv[i] % p;</span><br><span class="line">                <span class="keyword">if</span> (fir[pos] &amp;&amp; fir[pos] &lt;= d[i]) &#123;</span><br><span class="line">                    ++ ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3 2 1 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">5 4 3 3</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">0 100</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1>1010-Planar graph</h1><h2 id="题目描述-3">题目描述</h2><p>给出一张平面图，求用数量最少且编号最小的边使不同平面之间能够连通。</p><p><img src="/2022/08/04/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%886%EF%BC%89/graph1.png" alt="graph1"></p><p>比如这张图就把整个平面分割成了 $4$ 个部分，使用编号为 $1、2、3$ 的边能够让这 $4$ 个部分连通。</p><h2 id="思路-5">思路</h2><p>首先分割平面的条件为产生闭环，手玩几个样例之后我们会发现其实答案的个数其实是固定的，就是分割的平面的个数减一，是不是很像 $Kruskal$ ？因为要求边的编号最小，所以我们可以倒着加边，当两个端点在连接之前就已经在一块了，那么这时就产生了闭环，说明新的平面要产生了，这时这条边就是当前的最优边，然后重复这个过程。</p><p>很像吐槽的是，$hdu$ 的评测机居然会把 $RE$ 判成 $WA$，让我以为我想错了，结果数组开大一倍就过了…</p><h2 id="代码-5">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, f[N], u[N * <span class="number">2</span>], v[N * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; u[i] &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; idx;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt;= <span class="number">1</span>; -- i) &#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(u[i]), fy = <span class="built_in">find</span>(v[i]);</span><br><span class="line">        <span class="keyword">if</span> (fx == fy) &#123;</span><br><span class="line">            idx.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f[fx] = fy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; idx.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">sort</span>(idx.<span class="built_in">begin</span>(), idx.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : idx) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1012-Loop</h1><h2 id="题目描述-4">题目描述</h2><p>给出一个长度为 $n$ 的序列，你可以进行 $k$ 次操作，每次操作你都可以选择一个区间 $[l,r]$，让 $a_{i+1}=a_i(l \leq i \leq r-1)$，然后让 $a_l$ 等于原来的 $a_r$。</p><p>求$k$次操作后，字典序最大的序列是多少。</p><h2 id="思路-6">思路</h2><p>首先，我们考虑什么时候应该将 $a_i$ 挪到后面去，当后面有 $a_j$ 大于 $a_i$ 并且 $a_i$ 是前面小于 $a_j$ 的数里最小的数，这时我们就可以将 $a_i$ 挪到后面，然后将 $k$ 减 $1$。我们先不管将这些数挪到哪里，先将它们存起来。</p><p>当 $k$ 减到 $0$ 时，我们考虑将之前存起来的数插到剩余序列里去，我们贪心地将它们从大到小地插入。</p><p>我们考虑什么时候插入是最优的，设剩余的数组成的序列为 $b$ ，拿出来的数里当前最大的数为 $x$ ，当 $b_i \ge x &gt;b_{i+1}$ 时我们将 $x$ 插入到 $b_i$ 和 $b_{i+1}$ 之间是最优的。</p><h2 id="代码-6">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, a[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    set&lt; pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; &gt; st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; a1, a2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">while</span> (k &amp;&amp; !st.<span class="built_in">empty</span>() &amp;&amp; st.<span class="built_in">begin</span>()-&gt;first &lt; a[i]) &#123;</span><br><span class="line">            vis[st.<span class="built_in">begin</span>()-&gt;second] = <span class="literal">true</span>;</span><br><span class="line">            a2.<span class="built_in">push_back</span>(st.<span class="built_in">begin</span>()-&gt;first);</span><br><span class="line">            st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">            -- k;</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">insert</span>(&#123;a[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (k &amp;&amp; !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        vis[st.<span class="built_in">begin</span>()-&gt;second] = <span class="literal">true</span>;</span><br><span class="line">        a2.<span class="built_in">push_back</span>(st.<span class="built_in">begin</span>()-&gt;first);</span><br><span class="line">        st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">        -- k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a2.<span class="built_in">begin</span>(), a2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            a1.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a1.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(a1[i]);</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; a1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!a2.<span class="built_in">empty</span>() &amp;&amp; a1[i] &gt;= a2.<span class="built_in">back</span>() &amp;&amp; a2.<span class="built_in">back</span>() &gt; a1[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(a2.<span class="built_in">back</span>());</span><br><span class="line">                a2.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!a2.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(a2.<span class="built_in">back</span>());</span><br><span class="line">        a2.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i + <span class="number">1</span> == ans.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kruskal重构树学习笔记</title>
      <link href="/2022/08/03/Kruskal%E9%87%8D%E6%9E%84%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/03/Kruskal%E9%87%8D%E6%9E%84%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><a href="https://oi.wiki/graph/mst/#kruskal_1">$Kruskal$ 重构树</a></h1><h2 id="定义">定义</h2><p>在跑 $Kruskal$ 的过程中我们会从小到大加入若干条边。现在我们仍然按照这个顺序。</p><p>首先新建$n$个集合，每个集合恰有一个节点，点权为$0$。</p><p>每一次加边会合并两个集合，我们可以新建一个点，点权为加入边的边权，同时将两个集合的根节点分别设为新建点的左儿子和右儿子。然后我们将两个集合和新建点合并成一个集合。将新建点设为根。</p><p>不难发现，在进行$n-1$轮之后我们得到了一棵恰有$n$个叶子的二叉树，同时每个非叶子节点恰好有两个儿子。这棵树就叫 $Kruskal$ 重构树。</p><h2 id="性质">性质</h2><p>不难发现，原图中两个点之间的所有简单路径上最大边权的最小值 = 最小生成树上两个点之间的简单路径上的最大值 = $Kruskal$ 重构树上两点之间的 $LCA$ 的权值。</p><p>也就是说，到点$x$的简单路径上最大边权的最小值$\leq val$的所有点$y$均在 $Kruskal$ 重构树上的某一棵子树内，且恰好为该子树的所有叶子节点。</p><p>我们在 $Kruskal$  重构树上找到$x$到根的路径上权值$\leq val$的最浅的节点。显然这就是所有满足条件的节点所在的子树的根节点。</p><p>如果需要求原图中两个点之间的所有简单路径上最小边权的最大值，则在跑 $Kruskal$ 的过程中按边权大到小的顺序加边。</p><h1>练习</h1><h2 id="Luogu-P4197-Peaks"><a href="https://www.luogu.com.cn/problem/P4197">Luogu P4197 Peaks</a></h2><p>$kruskal$模版题</p><h3 id="题目描述-21">题目描述</h3><p>给定一张 $n$ 个点、$m$ 条边的无向图，第 $i$ 个点的权值为 $a_i$，边有边权。</p><p>有 $q$ 组询问，每组询问给定三个整数 $u, x, k$，求从 $u$ 开始只经过权值 $\leq x$ 的边所能到达的权值第 $k$ 大的点的权值，如果不存在输出 $-1$。</p><h3 id="思路-23">思路</h3><p>首先建立大根堆的$Kruskal$ 重构树，用可持久化权值线段树维护权值第 $k$ 大，查询时我们倍增到权值$\leq x$ 的最浅的节点，然后查询以该节点为根节点的子树内叶子结点权值第 $k$ 大。</p><h3 id="代码-33">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q, h[N];</span><br><span class="line"><span class="type">int</span> rt[N], ls[N &lt;&lt; <span class="number">5</span>], rs[N &lt;&lt; <span class="number">5</span>], cnt[N &lt;&lt; <span class="number">5</span>], tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> y, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    x = ++ tot;</span><br><span class="line">    cnt[x] = cnt[y] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">        rs[x] = rs[y];</span><br><span class="line">        <span class="built_in">Insert</span>(ls[x], ls[y], l, mid, p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ls[x] = ls[y];</span><br><span class="line">        <span class="built_in">Insert</span>(rs[x], rs[y], mid + <span class="number">1</span>, r, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> rcnt = cnt[rs[x]] - cnt[rs[y]];</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= rcnt) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Query</span>(rs[x], rs[y], mid + <span class="number">1</span>, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Query</span>(ls[x], ls[y], l, mid, k - rcnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Edge &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; o.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>], val[N], dep[N], dfn[N], siz[N], rk[N], ed[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>] == x ? x : f[x][<span class="number">0</span>] = <span class="built_in">find</span>(f[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; adj[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>] = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++ i) &#123;</span><br><span class="line">        f[x][i] = f[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    dep[x] = dep[p] + <span class="number">1</span>;</span><br><span class="line">    dfn[x] = ++ dfn[<span class="number">0</span>];</span><br><span class="line">    rk[dfn[x]] = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">            siz[x] += siz[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ed[x] = dfn[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (!siz[x]) &#123;</span><br><span class="line">        siz[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; h[i];</span><br><span class="line">        vec.<span class="built_in">push_back</span>(h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(vec), <span class="built_in">end</span>(vec));</span><br><span class="line">    vec.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">begin</span>(vec), <span class="built_in">end</span>(vec)), <span class="built_in">end</span>(vec));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        h[i] = <span class="built_in">lower_bound</span>(<span class="built_in">begin</span>(vec), <span class="built_in">end</span>(vec), h[i]) - <span class="built_in">begin</span>(vec) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt; Edge &gt; g;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        g.<span class="built_in">push_back</span>(&#123;u, v, w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(g), <span class="built_in">end</span>(g));</span><br><span class="line">    <span class="type">int</span> cnt = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[u, v, w] : g) &#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(u), fy = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            ++ cnt;</span><br><span class="line">            f[fx][<span class="number">0</span>] = f[fy][<span class="number">0</span>] = cnt;</span><br><span class="line">            val[cnt] = w;</span><br><span class="line">            adj[cnt] = &#123;fx, fy&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(cnt, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= dfn[<span class="number">0</span>]; ++ i) &#123;</span><br><span class="line">        rt[i] = rt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (rk[i] &lt;= n) &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(rt[i], rt[i - <span class="number">1</span>], <span class="number">1</span>, n, h[rk[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> v, x, k;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; x &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[v][i] &amp;&amp; val[f[v][i]] &lt;= x) &#123;</span><br><span class="line">                v = f[v][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (siz[v] &lt; k) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; vec[<span class="built_in">Query</span>(rt[ed[v]], rt[dfn[v] - <span class="number">1</span>], <span class="number">1</span>, n, k) - <span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Luogu-4768-NOI2018-归程"><a href="https://www.luogu.com.cn/problem/P4768">Luogu 4768 NOI2018] 归程</a></h2><h3 id="题目描述-22">题目描述</h3><p>给定一张$n$个点，$m$条边的无向图，每条边有两个属性：$l$长度、$a$海拔。</p><p>我们用<strong>水位线</strong>来描述降雨的程度，它的意义是：所有海拔<strong>不超过</strong>水位线的边都是<strong>有积水</strong>的。</p><p>$q$次询问，每次给出起点$v$和当天的水位线$p$，终点默认为$1$，每天都给你一辆车，你可以骑车先经过一些没有积水的路，直到遇到有积水的路，这时你就不能使用车了，接下来的所有的路都必须靠你步行，求从起点到终点步行的最短距离。</p><h3 id="思路-24">思路</h3><p>首先预处理$1$到$n-1$个节点的最短路，然后按照海拔由高到低排序，建立 $Kruskal$ 重构树，倍增地找海拔$&gt; p$的最浅的节点，若找到则说明你可以骑车到达该子树里任意一个叶子结点，然后步行到终点。若没找到，说明你只能步行，没有骑车的机会，最后维护一下每颗子树内，叶子结点到终点的最短路。</p><h3 id="代码-34">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Edge &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; o.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt; Edge &gt; g;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    LL v, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; o.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt; Node &gt; adj[N];</span><br><span class="line">LL dis[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line">        dis[i] = <span class="number">1e18</span>;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    priority_queue&lt; Node &gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">1</span>, dis[<span class="number">1</span>] = <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node p = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[p.v]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[p.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[v, w] : adj[p.v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; dis[v] &gt; dis[p.v] + w) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;v, dis[v] = dis[p.v] + w&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>], val[N];</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; ver[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>] == x ? x : f[x][<span class="number">0</span>] = <span class="built_in">find</span>(f[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>] = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++ i) &#123;</span><br><span class="line">        f[x][i] = f[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : ver[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">            dis[x] = <span class="built_in">min</span>(dis[x], dis[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, q, k, s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    g.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        adj[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, l, a;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; l &gt;&gt; a;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(&#123;v, l&#125;);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(&#123;u, l&#125;);</span><br><span class="line">        g.<span class="built_in">push_back</span>(&#123;u, v, a&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(g), <span class="built_in">end</span>(g));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = i;</span><br><span class="line">        ver[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[u, v, w] : g) &#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(u), fy = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            ++ cnt;</span><br><span class="line">            f[fx][<span class="number">0</span>] = f[fy][<span class="number">0</span>] = cnt;</span><br><span class="line">            val[cnt] = w;</span><br><span class="line">            ver[cnt] = &#123;fx, fy&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(n);</span><br><span class="line">    <span class="built_in">dfs</span>(cnt, <span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; q &gt;&gt; k &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> v, p;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; p;</span><br><span class="line">        v = (v + k * lastans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        p = (p + k * lastans) % (s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[v][i] &amp;&amp; val[f[v][i]] &gt; p) &#123;</span><br><span class="line">                v = f[v][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (lastans = dis[v]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Life-is-a-Game-第-46-届-ICPC-国际大学生程序设计竞赛亚洲区域赛（上海）"><a href="https://ac.nowcoder.com/acm/contest/24872/H">H-Life is a Game_第 46 届 ICPC 国际大学生程序设计竞赛亚洲区域赛（上海）</a></h2><p>现在回想起来真是太痛了，去年啥都不懂去打区域赛，结果这一站太卷了，一道没听过的$Kruskal$重构树居然过了快$200$个队，为什么人人都会重构树啊！</p><h3 id="题目描述-23">题目描述</h3><p>给出一棵具有 $n$ 个点的树，在每个结点处都可以获得$a_i$个硬币，同时每条边具有限制$w_i$，必须拥有不少于 $w_i$ 个硬币才可以通过这条边，共有$q$组询问，每次询问给出起点$s$和初始硬币数$t$，求最终能获得多少硬币。</p><h3 id="思路-25">思路</h3><p>首先我们按照边权限制从小到大排序，依次建立重构树的边。我们若想获得某颗子树内所有的硬币，那么我们手里的硬币至少要不小于子树根节点的权值，理由如下：我们每枚举一条边可以将两个不同的连通块连接起来时，这条边就是这两个连通块的最小瓶颈边，即只要手中的硬币数不小于这个点的权值，我们就可以从一个连通块走到另一个连通块并且收获另一个连通块的硬币数。所以现在我们可以枚举起点$s$的祖先，因为硬币数和限制时同时变化的，所以我们必须一个一个地跳，但是这样复杂度是 $\Theta(depth_s)$ 的，所以我们从另一个角度想，将限制减去子树内的总硬币数，然后我们倍增地维护节点 $x$ 到 $fa_{x,i}$ 的最大值，当我们手中的硬币数不小于这个最大值时即可将 $x$ 转移到 $fa_{x,i}$。<br>最后答案即为初始硬币数$+$当前节点子树内叶子结点的硬币数之和。</p><h3 id="代码-35">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q, a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Edge &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; o.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>], val[N], mx[N][<span class="number">20</span>];</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; adj[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>] == x ? x : f[x][<span class="number">0</span>] = <span class="built_in">find</span>(f[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>] = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++ i) &#123;</span><br><span class="line">        f[x][i] = f[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    mx[x][<span class="number">0</span>] = val[p] - a[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++ i) &#123;</span><br><span class="line">        mx[x][i] = <span class="built_in">max</span>(mx[x][i - <span class="number">1</span>], mx[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt; Edge &gt; g;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        g.<span class="built_in">push_back</span>(&#123;u, v, w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(g), <span class="built_in">end</span>(g));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[u, v, w] : g) &#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(u), fy = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            ++ cnt;</span><br><span class="line">            f[fx][<span class="number">0</span>] = f[fy][<span class="number">0</span>] = cnt;</span><br><span class="line">            adj[cnt] = &#123;fx, fy&#125;;</span><br><span class="line">            a[cnt] = a[fx] + a[fy];</span><br><span class="line">            val[cnt] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(cnt, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x, q;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[x][i] &amp;&amp; mx[x][i] &lt;= q) &#123;</span><br><span class="line">                x = f[x][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; a[x] + q &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="codeforces-809-div-2-E-Qpwoeirut-and-Vertices"><a href="https://codeforces.com/contest/1706/problem/E">codeforces #809(div.2) E-Qpwoeirut and Vertices</a></h2><p>$Kruskal$ 重构树变形题，确实很妙，是个质量很好的题目。</p><h3 id="题目描述-24">题目描述</h3><p>给出 $n$ 个点，$m$ 条边的不带权连通无向图，$q$ 次询问至少要加完编号前多少的边，才能使得 $[l,r]$ 中的所有点两两连通。</p><h3 id="思路-26">思路</h3><p>其实初看很难将题目和 $Kruskal$ 重构树结合在一起，现在细想一下，重构树某子树内所有叶子结点之间路径最大边权的最小值其实就是子树根节点的权值。因为原图中两个点之间的所有简单路径上最大边权的最小值 = 最小生成树上两个点之间的简单路径上的最大值 = $Kruskal$  重构树上两点之间的 $LCA$ 的权值，拓展到$k$个点之间的所有简单路径上最大边权的最小值其实就是 $Kruskal$ 重构树中这$k$个点的$lca$的权值。简单点说，树上多个点的$LCA$，就是 $DFS$ 序最小的和 $DFS$ 序最大的这两个点的 $LCA$。具体证明请看：<a href="https://www.zhihu.com/question/46440863/answer/165741734">如何在 DAG 中找多个点的 LCA ? </a> 其实画个图就是最简单直接的方法。</p><p>现在我们考虑建立 $Kruskal$ 重构树，边权为边的编号，现在重构树某子树内所有叶子结点之间能够两两联通的加的边数最大的最小值其实就是整颗子树根节点的权值。</p><p>然后我们查询$[l,r]$内所有节点的$LCA$，等价于查询$[l,r]$内$DFS$序最小的点和$DFS$序最大的点的$LCA$，所以我们随便拿一个数据结构来维护区间$DFS$序最小和最大分别对应的节点。</p><h3 id="代码-36">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; f, siz;</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n) : <span class="built_in">f</span>(n), <span class="built_in">siz</span>(n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(<span class="built_in">begin</span>(f), <span class="built_in">end</span>(f), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (siz[x] &lt; siz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">            siz[x] += siz[y];</span><br><span class="line">            f[y] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">operator</span> [](<span class="type">int</span> x) &#123; <span class="keyword">return</span> <span class="built_in">find</span>(x);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> cnt, idx[N];</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; adj[N];</span><br><span class="line"><span class="type">int</span> dep[N], f[N][<span class="number">20</span>], lg[N], dfn[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= n) &#123;</span><br><span class="line">        dfn[x] = ++ dfn[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lg[n]; ++ i) f[x][i] = f[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">        f[y][<span class="number">0</span>] = x;</span><br><span class="line">        <span class="built_in">dfs</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lg[n * <span class="number">2</span> - <span class="number">1</span>]; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[f[y][i]] &gt;= dep[x]) &#123;</span><br><span class="line">            y = f[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lg[n * <span class="number">2</span> - <span class="number">1</span>]; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[x][i] != f[y][i]) &#123;</span><br><span class="line">            x = f[x][i];</span><br><span class="line">            y = f[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sparse_Table</span> &#123;</span><br><span class="line">    vector&lt; vector&lt; <span class="type">int</span> &gt; &gt; mn, mx;</span><br><span class="line">    <span class="built_in">Sparse_Table</span>(<span class="type">int</span> n) : <span class="built_in">mn</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt; <span class="type">int</span> &gt; (lg[n] + <span class="number">1</span>, <span class="number">0</span>)), <span class="built_in">mx</span>(mn)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">            mn[i][<span class="number">0</span>] = mx[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lg[n]; ++ j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++ i) &#123;</span><br><span class="line">                mn[i][j] = dfn[mn[i][j - <span class="number">1</span>]] &gt; dfn[mn[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]] ? mn[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>] : mn[i][j - <span class="number">1</span>];</span><br><span class="line">                mx[i][j] = dfn[mx[i][j - <span class="number">1</span>]] &lt; dfn[mx[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]] ? mx[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>] : mx[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = lg[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> Max = dfn[mx[l][k]] &gt; dfn[mx[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]] ? mx[l][k] : mx[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k];</span><br><span class="line">        <span class="type">int</span> Min = dfn[mn[l][k]] &lt; dfn[mn[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]] ? mn[l][k] : mn[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k];</span><br><span class="line">        <span class="keyword">return</span> &#123;Max, Min&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line">        adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        dep[i] = dfn[i] = idx[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= lg[n * <span class="number">2</span> - <span class="number">1</span>]; ++ j) f[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">UnionFind <span class="title">dsu</span><span class="params">(n * <span class="number">2</span>)</span></span>;</span><br><span class="line">    cnt = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u = dsu[u];</span><br><span class="line">        v = dsu[v];</span><br><span class="line">        <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">            adj[++ cnt] = &#123;u, v&#125;;</span><br><span class="line">            idx[cnt] = i;</span><br><span class="line">            dsu.f[u] = dsu.f[v] = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(cnt);</span><br><span class="line">    <span class="function">Sparse_Table <span class="title">st</span><span class="params">(n)</span></span>;</span><br><span class="line">    st.<span class="built_in">Build</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">auto</span> [x, y] = st.<span class="built_in">query</span>(l, r);</span><br><span class="line">        cout &lt;&lt; idx[<span class="built_in">LCA</span>(x, y)] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == q];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; ++ i) &#123;</span><br><span class="line">        lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1600 [NOIP2016 提高组] 天天爱跑步(差分+线段树合并)</title>
      <link href="/2022/08/03/P1600-NOIP2016-%E6%8F%90%E9%AB%98%E7%BB%84-%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5-%E5%B7%AE%E5%88%86-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/"/>
      <url>/2022/08/03/P1600-NOIP2016-%E6%8F%90%E9%AB%98%E7%BB%84-%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5-%E5%B7%AE%E5%88%86-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>题目链接</strong>： <a href="https://www.luogu.com.cn/problem/P1600">NOIP2016 提高组] 天天爱跑步</a></p><p>这道题搁了好久了没写，今天浅录一下</p><h1>题意</h1><p><code>小c</code>制作了一款叫做《天天爱跑步》的游戏。</p><p>这个游戏的地图可以看作一棵包含 $n$ 个结点和 $n-1$ 条边的树，每条边连接两个结点,且任意两个结点存在一条路径互相可达。树上结点编号为从 $1$ 到 $n$ 的连续正整数。</p><p>现在有 $m$ 个玩家，第 $i$ 个玩家的起点为 $s_i$，终点为 $t_i$。每天打卡任务开始时，所有玩家在第 $0$ 秒同时从自己的起点出发，以每秒跑一条边的速度，不间断地沿着最短路径向着自己的终点跑去，跑到终点后该玩家就算完成了打卡任务。 (由于地图是一棵树，所以每个人的路径是唯一的)</p><p><code>小c</code> 想知道游戏的活跃度，所以在每个结点上都放置了一个观察员。在结点 $j$ 的观察员会选择在第 $w_j$ 秒观察玩家，一个玩家能被这个观察员观察到当且仅当该玩家在第 $w_j$ 秒也正好到达了结点 $j$ 。<code>小c</code> 想知道每个观察员会观察到多少人?</p><h1>思路</h1><p>我们将$s \rightarrow t$的路径分成$s \rightarrow lca$和$lca \rightarrow t$这两条路径，前者深度递减，我们称它为上升链，后者深度递增，我们称之为下降链。</p><p>这里放张图。</p><p><img src="/2022/08/03/P1600-NOIP2016-%E6%8F%90%E9%AB%98%E7%BB%84-%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5-%E5%B7%AE%E5%88%86-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/graph.png" alt="graph"></p><p>假设当前的$s=3,t=5$那么他们的$lca=1$。</p><p>首先我们分析上升链，处于该链上的节点若想要观察到该玩家，那么必须满足<br>$$<br>w_x = depth_s - depth_x<br>$$<br>即<br>$$<br>depth_x + w_x = depth_s<br>$$<br>然后我们在这条上升链上差分一下，在$s$处插入$1$个$depth_s$，在$fa_{lca}$处插入$-1$个$depth_s$</p><p>接下来分析下降链，还是一样先计算类似上升链的等式<br>$$<br>w_x = depth_x - depth_{lca} + depth_s - depth_{lca}<br>$$<br>即<br>$$<br>depth_x - w_x = 2 \times depth_{lca} - depth_s<br>$$<br>然后我们在除去$lca$的下降链上进行差分($lca$已经包含在上升链内)，在$t$处插入$1$个$2 \times depth_{lca} - depth_s$，在$lca$出插入$-1$个$2 \times depth_{lca} - depth_s$</p><p>最后我们再$dfs$统计一下，将每个子树的信息合并到该子树的根节点上，然后分别查询$depth_x+w_x$以及$depth_x-w_x$的出现次数，最后加起来就为观察员$x$在$w_x$时刻能够观察到的玩家个数。</p><p>需要注意的是若$w_x=0$，上升和下降会重复计算一次，需要特判一下。</p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, w[N];</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; adj[N];</span><br><span class="line"><span class="type">int</span> dep[N], top[N], son[N], siz[N], f[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    dep[x] = dep[p] + <span class="number">1</span>;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    f[x] = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs1</span>(y, x);</span><br><span class="line">            siz[x] += siz[y];</span><br><span class="line">            <span class="keyword">if</span> (siz[y] &gt; siz[son[x]]) &#123;</span><br><span class="line">                son[x] = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> tp)</span> </span>&#123;</span><br><span class="line">    top[x] = tp;</span><br><span class="line">    <span class="keyword">if</span> (!son[x]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[x], tp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y != son[x] &amp;&amp; y != f[x]) &#123;</span><br><span class="line">            <span class="built_in">dfs2</span>(y, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        x = f[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[x] &gt; dep[y] ? y : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rt[N], ls[N &lt;&lt; <span class="number">6</span>], rs[N &lt;&lt; <span class="number">6</span>], cnt[N &lt;&lt; <span class="number">6</span>], tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Modify</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">        x = ++ tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        cnt[x] += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">Modify</span>(ls[x], l, mid, p, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Modify</span>(rs[x], mid + <span class="number">1</span>, r, p, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x | y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> z = ++ tot;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        cnt[z] = cnt[x] + cnt[y];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        ls[z] = <span class="built_in">Merge</span>(ls[x], ls[y], l, mid);</span><br><span class="line">        rs[z] = <span class="built_in">Merge</span>(rs[x], rs[y], mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> cnt[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Query</span>(ls[x], l, mid, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Query</span>(rs[x], mid + <span class="number">1</span>, r, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;y : adj[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">            rt[x] = <span class="built_in">Merge</span>(rt[x], rt[y], -n, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] + w[x] &lt;= n) &#123;</span><br><span class="line">        ans[x] += <span class="built_in">Query</span>(rt[x], -n, n, dep[x] + w[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] - w[x] &gt;= -n) &#123;</span><br><span class="line">        ans[x] += <span class="built_in">Query</span>(rt[x], -n, n, dep[x] - w[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!w[x]) &#123;</span><br><span class="line">        ans[x] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> s, t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        <span class="type">int</span> kk = <span class="built_in">lca</span>(s, t);</span><br><span class="line">        <span class="built_in">Modify</span>(rt[s], -n, n, dep[s], <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Modify</span>(rt[f[kk]], -n, n, dep[s], <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">Modify</span>(rt[t], -n, n, <span class="number">2</span> * dep[kk] - dep[s], <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Modify</span>(rt[kk], -n, n, <span class="number">2</span> * dep[kk] - dep[s], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022“杭电杯”中国大学生算法设计超级联赛（5）</title>
      <link href="/2022/08/02/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%885%EF%BC%89/"/>
      <url>/2022/08/02/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这场多校幸亏有数学大手子队友切了道多项式题，$rank$++</p><p>然后记录一下我赛中写的几题。</p><h1>1003-Slipper</h1><h2 id="题意">题意</h2><p>给出一颗根节点为$1$的树，每条边都有$w_i$的费用。</p><p>现在给你两个整数$k,p$，代表任意$u,v$只要$|depth_u-depth_v|=k$，那么就可以花费$p$的代价从$u$走到$v$或者从$v$走到$u$。</p><p>最后给你两个整数$s,t$求从$s$走到$t$的花费的最小代价是多少</p><h2 id="思路">思路</h2><p>我们考虑对每个深度建立一个虚点，我们设这个虚点为$d_i$，然后树上每个节点对应深度的虚点向该节点连边，</p><p>该节点向深度为$depth_i+k$以及$depth_i-k$对应的虚点连边，最后跑$s \rightarrow t$的最短路。</p><p>但是没想到这题卡$vector$，必须用链式前向星连边才行。</p><p><img src="/2022/08/02/2022%E2%80%9C%E6%9D%AD%E7%94%B5%E6%9D%AF%E2%80%9D%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%B6%85%E7%BA%A7%E8%81%94%E8%B5%9B%EF%BC%885%EF%BC%89/png1.png" alt="png1"></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>, MOD = <span class="number">99824435</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k, p, s, t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">&#125; G[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">int</span> dep[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    LL v, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; o.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">LL dis[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> head1[N], ver1[N], Next[N], tot1;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    ver1[++ tot1] = v;</span><br><span class="line">    Next[tot1] = head1[u];</span><br><span class="line">    head1[u] = tot1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> head2[N * <span class="number">3</span>], ver2[N * <span class="number">3</span>], Next2[N * <span class="number">3</span>], val[N * <span class="number">3</span>], tot2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    ver2[++ tot2] = v;</span><br><span class="line">    val[tot2] = w;</span><br><span class="line">    Next[tot2] = head2[u];</span><br><span class="line">    head2[u] = tot2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    dep[x] = dep[p] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head1[x]; i; i = Next[i]) &#123;</span><br><span class="line">        <span class="type">int</span> y = ver1[i];</span><br><span class="line">        <span class="keyword">if</span> (y ^ p) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt; Node &gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> st, <span class="type">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n * <span class="number">2</span>; ++ i) &#123;</span><br><span class="line">        dis[i] = <span class="number">1e14</span>;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;st, dis[st] = <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node p = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[p.v]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[p.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head2[p.v]; i; i = Next[i]) &#123;</span><br><span class="line">            LL v = ver2[i], w = val[i];</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; dis[v] &gt; dis[p.v] + w) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;v, dis[v] = dis[p.v] + w&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= tot1; ++ i) &#123;</span><br><span class="line">        head1[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= tot2; ++ i) &#123;</span><br><span class="line">        head2[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tot1 = tot2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;G[i].u, &amp;G[i].v, &amp;G[i].w);</span><br><span class="line">        <span class="built_in">add_edge1</span>(G[i].u, G[i].v);</span><br><span class="line">        <span class="built_in">add_edge1</span>(G[i].v, G[i].u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u = G[i].u, v = G[i].v, w = G[i].w;</span><br><span class="line">        <span class="built_in">add_edge2</span>(u, v, w);</span><br><span class="line">        <span class="built_in">add_edge2</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;k, &amp;p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; ++ i)&#123;</span><br><span class="line">        <span class="built_in">add_edge2</span>(dep[i] + n, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;s, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l = dep[i] - k;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">add_edge2</span>(i, l + n, p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> r = dep[i] + k;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= n)&#123;</span><br><span class="line">            <span class="built_in">add_edge2</span>(i, r + n, p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(s, t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dis[t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1012-Buy Figurines</h1><h2 id="题意-2">题意</h2><p>$n$个人，$m$条排队通道，每个人都要来商场购物，给出每个人到达时间 $s_i$ 和购物所需的时间 $t_i$。</p><p>现有如下规则：</p><ul><li>当第$i$个人到达商场时，他会选择当前排队人数最少的通道，若这样的通道不只一个，那么他会选择队伍编号最小的</li><li>若当前时刻有人离开，那么他会等所有当前时刻的人离开后，再去排队</li></ul><p>求所有人都完成购物的最少时间</p><h2 id="思路-2">思路</h2><p>我们考虑维护当前时刻每个队伍的人数以及排了队的人的离开时间和他所属的排队通道的标号，当该时刻有人来购物时，我们把所有排了队的人里结束时间小于等于该时刻的人给“丢掉”，并且实时更新“丢掉”的人所属排队通道正在排队的人数。最后输出最大离开时间即可。</p><h2 id="代码-2">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> cnt[N], ed_time[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt; pair&lt; LL, LL &gt; &gt; a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> s, t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        a.<span class="built_in">push_back</span>(&#123;s, t&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        cnt[i] = ed_time[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    multiset&lt; pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; &gt; st;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    multiset&lt; pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; &gt; que;</span><br><span class="line">    multiset&lt; pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; &gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> s = a[i].first, t = a[i].second;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; m) &#123;</span><br><span class="line">            ++ num;</span><br><span class="line">            cnt[num] = <span class="number">1</span>;</span><br><span class="line">            ed_time[num] = s + t;</span><br><span class="line">            st.<span class="built_in">insert</span>(&#123;<span class="number">1</span>, num&#125;);</span><br><span class="line">            que.<span class="built_in">insert</span>(&#123;s + t, num&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; que.<span class="built_in">begin</span>()-&gt;first &lt;= s) &#123;</span><br><span class="line">                <span class="type">int</span> pos = que.<span class="built_in">begin</span>()-&gt;second;</span><br><span class="line">                st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(&#123;cnt[pos], pos&#125;));</span><br><span class="line">                -- cnt[pos];</span><br><span class="line">                st.<span class="built_in">insert</span>(&#123;cnt[pos], pos&#125;);</span><br><span class="line">                que.<span class="built_in">erase</span>(que.<span class="built_in">begin</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> CNT = st.<span class="built_in">begin</span>()-&gt;first, POS = st.<span class="built_in">begin</span>()-&gt;second;</span><br><span class="line">            st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">            ++ cnt[POS];</span><br><span class="line">            ed_time[POS] = <span class="built_in">max</span>(ed_time[POS], s) + t;</span><br><span class="line">            st.<span class="built_in">insert</span>(&#123;cnt[POS], POS&#125;);</span><br><span class="line">            que.<span class="built_in">insert</span>(&#123;ed_time[POS], POS&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; *<span class="built_in">max_element</span>(ed_time + <span class="number">1</span>, ed_time + m + <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t -- ) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4287 [SHOI2011]双倍回文</title>
      <link href="/2022/08/02/P4287-SHOI2011-%E5%8F%8C%E5%80%8D%E5%9B%9E%E6%96%87/"/>
      <url>/2022/08/02/P4287-SHOI2011-%E5%8F%8C%E5%80%8D%E5%9B%9E%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://www.luogu.com.cn/problem/P4287">SHOI2011]双倍回文 - 洛谷</a></p><h1>前置知识： 回文自动机</h1><p>有关回文自动机的介绍以及求法，这里推荐三篇博客</p><p><a href="https://oi.wiki/string/pam/">回文树 - OI Wiki</a></p><p><a href="https://www.cnblogs.com/bztMinamoto/p/9630617.html">回文自动机学习笔记 - bztMinamoto - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/Clove_unique/article/details/53750322">Manacher 回文自动机 学习笔记_Clove_unique的博客-CSDN博客_回文自动机</a></p><p>这几个博客都讲解得很好，结合起来食用效果更佳！</p><p>如果觉得太抽象的话，可以在纸上画几个回文自动机，理解每个操作的原理。</p><h1>题意</h1><p>一个长度为$n$的字符串$S$，在$S$的子串中寻找形如$ss$（$s$为回文串）的最长$ss$长度</p><h1>思路</h1><p>首先建立回文自动机，在求$fail$指针时，我们维护一个$go$指针，指向长度不大于当前回文串一半的最长回文后缀的节点。</p><p>我们考虑每次插入字符$c$的过程。</p><p>当我们新建一个节点$x$时，若该节点的父节点的长度已经小于等于该节点长度的一半，我们直接让$go_x $指向父节点，即$fail_x$。</p><p>否则我们从$x$的父节点的$go$指针不断向上跳，直到当前节点两端能拓展字符$c$并且拓展后长度不大于$x$的长度，那么$go_x$指向当前节点的儿子为$c$的子节点。</p><p>现在我们枚举回文自动机上的每个节点，若当前节点的长度为$4$的倍数且它的$go$指针指向的节点长度刚好为当前节点长度的一半，那么我们对该长度取$\max$，最后输出$\max$即可。</p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Palindromic_Automaton</span> &#123;</span><br><span class="line">    <span class="type">int</span> s[N], top; <span class="comment">// 原串</span></span><br><span class="line">    <span class="type">int</span> ch[N][<span class="number">26</span>], fail[N], len[N], tot, last;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Palindromic_Automaton</span>() &#123;</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">-114514</span>;</span><br><span class="line">        tot = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">New</span>(<span class="number">0</span>); <span class="comment">// 偶根</span></span><br><span class="line">        <span class="built_in">New</span>(<span class="number">-1</span>); <span class="comment">// 奇根</span></span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">New</span><span class="params">(<span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">        len[++ tot] = length;</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Get_Fail</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="comment">// 找最长的回文后缀</span></span><br><span class="line">        <span class="keyword">while</span> (s[top - len[x] - <span class="number">1</span>] != s[top]) &#123;</span><br><span class="line">            x = fail[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> go[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Extend</span><span class="params">(<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        s[++ top] = c;</span><br><span class="line">        <span class="type">int</span> now = <span class="built_in">Get_Fail</span>(last);</span><br><span class="line">        <span class="keyword">if</span> (!ch[now][c]) &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">New</span>(len[now] + <span class="number">2</span>);</span><br><span class="line">            fail[x] = ch[<span class="built_in">Get_Fail</span>(fail[now])][c];</span><br><span class="line">            ch[now][c] = x;</span><br><span class="line">            <span class="keyword">if</span> (len[fail[x]] &lt;= len[x] / <span class="number">2</span>) &#123;</span><br><span class="line">                go[x] = fail[x];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> y = go[now];</span><br><span class="line">                <span class="keyword">while</span> (len[y] + <span class="number">2</span> &gt; len[x] / <span class="number">2</span> || s[top - len[y] - <span class="number">1</span>] != s[top]) &#123;</span><br><span class="line">                    y = fail[y];</span><br><span class="line">                &#125;</span><br><span class="line">                go[x] = ch[y][c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = ch[now][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= tot; ++ i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (len[i] % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; len[i] == len[go[i]] * <span class="number">2</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, len[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pam;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x : s) &#123;</span><br><span class="line">        pam.<span class="built_in">Extend</span>(x - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pam.<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蔚来杯2022牛客暑期多校训练营1 F Cut</title>
      <link href="/2022/08/01/%E8%94%9A%E6%9D%A5%E6%9D%AF2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51-F-Cut/"/>
      <url>/2022/08/01/%E8%94%9A%E6%9D%A5%E6%9D%AF2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51-F-Cut/</url>
      
        <content type="html"><![CDATA[<p>数据结构大🐂子题，很考验码力，虽然赛中不会做，但是把题解看懂不也是${\color{Red}win}?$</p><p>题目链接：<a href="https://ac.nowcoder.com/acm/contest/33186/F">Cut</a></p><h1>题意</h1><p>长度为$n$的序列$a_i$，$m$次操作，操作分三种</p><ul><li>将 $a_l,a_{l+1},\cdots,a_r$ 升序排列</li><li>将 $a_l,a_{l+1},\cdots,a_r$ 降序排列</li><li>求出下标在$[l,r]$内的最长奇偶交替子序列的长度</li></ul><h1>思路</h1><p>看到区间排序，我们首先想到了这一道题<a href="https://www.luogu.com.cn/problem/P2824">P2824 [HEOI2016/TJOI2016]排序</a>)，这题有两个做法，离线二分+线段树以及动态开点线段树+类似<a href="https://oi.wiki/ds/odt/">珂朵莉树</a>的$set$操作。<img src="/2022/08/01/%E8%94%9A%E6%9D%A5%E6%9D%AF2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51-F-Cut/pic3.png" alt="图片1"></p><p>而这一题显然不能离线做，所以我们考虑用线段树分裂来维护区间排序操作。可以参考这位大佬的博客，<a href="https://www.luogu.com.cn/blog/flashblog/solution-p2824">[HEOI2016/TJOI2016]排序</a>)。</p><p>然后我们怎么维护操作三的最长奇偶交替子序列的长度呢，如果单看操作三，我们可以用线段树维护区间合并，毕竟线段树很擅长区间信息合并这一操作，我们用$f_{i,j}$代表该区间以$i$开头，$j$结尾的最长奇偶交替序列长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> Info <span class="keyword">operator</span> + (<span class="type">const</span> Info &amp;l, <span class="type">const</span> Info &amp;r) &#123;</span><br><span class="line">    Info rt;</span><br><span class="line">    rt.f[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">0</span>][<span class="number">0</span>], r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">0</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">0</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">    rt.f[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">1</span>][<span class="number">1</span>], r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">1</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">1</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">    rt.f[<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">1</span>][<span class="number">0</span>], r.f[<span class="number">1</span>][<span class="number">0</span>], l.f[<span class="number">1</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">1</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">    rt.f[<span class="number">0</span>][<span class="number">1</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">0</span>][<span class="number">1</span>], r.f[<span class="number">0</span>][<span class="number">1</span>], l.f[<span class="number">0</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">0</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们思考如何将区间排序和操作三的查询结合在一起</p><p><img src="/2022/08/01/%E8%94%9A%E6%9D%A5%E6%9D%AF2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51-F-Cut/pic2.png" alt="图片2"></p><p>这里我和题解不同，我是维护的右端点，但是结果是一样的，我们考虑将一段分裂的区间的信息全压缩到该区间的右端点上，每次分裂、合并时我们都用那颗维护操作三的线段树更新新区间右端点的$f_{i,j}$，查询时我们$Split(l-1),Split({r})$将$l-1,r$分裂成右端点，然后查询时我们只需要查询$[l,r]$里的右端点信息合并之后的最大值<br>$$<br>ans = \max (f_{0,0},f_{0,1},f_{1,0},f_{1,1})<br>$$</p><h2 id="代码-44">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">Info</span>() &#123;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = f[<span class="number">1</span>][<span class="number">1</span>] = f[<span class="number">0</span>][<span class="number">1</span>] = f[<span class="number">1</span>][<span class="number">0</span>] = -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Info <span class="keyword">operator</span> + (<span class="type">const</span> Info &amp;l, <span class="type">const</span> Info &amp;r) &#123;</span><br><span class="line">        Info rt;</span><br><span class="line">        rt.f[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">0</span>][<span class="number">0</span>], r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">0</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">0</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">        rt.f[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">1</span>][<span class="number">1</span>], r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">1</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">1</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">        rt.f[<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">1</span>][<span class="number">0</span>], r.f[<span class="number">1</span>][<span class="number">0</span>], l.f[<span class="number">1</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">0</span>], l.f[<span class="number">1</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">        rt.f[<span class="number">0</span>][<span class="number">1</span>] = <span class="built_in">max</span>(&#123;l.f[<span class="number">0</span>][<span class="number">1</span>], r.f[<span class="number">0</span>][<span class="number">1</span>], l.f[<span class="number">0</span>][<span class="number">0</span>] + r.f[<span class="number">1</span>][<span class="number">1</span>], l.f[<span class="number">0</span>][<span class="number">1</span>] + r.f[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> tot, ls[N &lt;&lt; <span class="number">6</span>], rs[N &lt;&lt; <span class="number">6</span>], cnt[N &lt;&lt; <span class="number">6</span>];</span><br><span class="line">Info inf[N &lt;&lt; <span class="number">6</span>];</span><br><span class="line">set&lt; <span class="type">int</span> &gt;::iterator it;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    cnt[x] = cnt[ls[x]] + cnt[rs[x]];</span><br><span class="line">    inf[x] = inf[ls[x]] + inf[rs[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    x = ++ tot;</span><br><span class="line">    cnt[x] = <span class="number">1</span>;</span><br><span class="line">    inf[x].f[p &amp; <span class="number">1</span>][p &amp; <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(ls[x], l, mid, p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">insert</span>(rs[x], mid + <span class="number">1</span>, r, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) &#123;</span><br><span class="line">        x += y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge</span>(ls[x], ls[y], l, mid);</span><br><span class="line">    <span class="built_in">merge</span>(rs[x], rs[y], mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 前k个给x,其余给y</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        x = y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123; <span class="comment">// 断边</span></span><br><span class="line">        <span class="keyword">if</span> (k) &#123;</span><br><span class="line">            x = p;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y = p;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt[ls[p]] &gt;= k) &#123; <span class="comment">// 右儿子给y, 递归左儿子</span></span><br><span class="line">        y = p;</span><br><span class="line">        x = ++ tot;</span><br><span class="line">        <span class="built_in">split</span>(ls[p], ls[x], ls[y], l, mid, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 左儿子给x, 递归右儿子</span></span><br><span class="line">        x = p;</span><br><span class="line">        y = ++ tot;</span><br><span class="line">        <span class="built_in">split</span>(rs[p], rs[x], rs[y], mid + <span class="number">1</span>, r, k - cnt[ls[p]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(x);</span><br><span class="line">    <span class="built_in">push_up</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">Info seg[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, q, a[N], col[N], rt[N];</span><br><span class="line">set&lt; <span class="type">int</span> &gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        seg[x] = inf[rt[l]];</span><br><span class="line">        <span class="keyword">if</span> (col[l]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(seg[x].f[<span class="number">0</span>][<span class="number">1</span>], seg[x].f[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(x &lt;&lt; <span class="number">1</span>, l, mid, p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">update</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, p);</span><br><span class="line">    &#125;</span><br><span class="line">    seg[x] = seg[x &lt;&lt; <span class="number">1</span>] + seg[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Info <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt; qr || ql &gt; r || qr &lt; l) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        <span class="keyword">return</span> seg[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, l, mid, ql, qr) + <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    it = s.<span class="built_in">lower_bound</span>(p);</span><br><span class="line">    <span class="keyword">if</span> (*it == p) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> r = *it, l = *<span class="built_in">prev</span>(it) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (col[r]) &#123;</span><br><span class="line">        <span class="built_in">split</span>(rt[r], rt[r], rt[p], <span class="number">1</span>, n, r - p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">split</span>(rt[r], rt[p], rt[r], <span class="number">1</span>, n, p - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    col[p] = col[r];</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, p);</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, r);</span><br><span class="line">    s.<span class="built_in">insert</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(l - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">split</span>(r);</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = s.<span class="built_in">lower_bound</span>(l); *it &lt;= r;) &#123;</span><br><span class="line">        <span class="built_in">merge</span>(x, rt[*it], <span class="number">1</span>, n);</span><br><span class="line">        rt[*it] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, *it);</span><br><span class="line">        set&lt; <span class="type">int</span> &gt;::iterator IT = it;</span><br><span class="line">        ++ it;</span><br><span class="line">        s.<span class="built_in">erase</span>(IT);</span><br><span class="line">    &#125;</span><br><span class="line">    rt[r] = x;</span><br><span class="line">    col[r] = op;</span><br><span class="line">    s.<span class="built_in">insert</span>(r);</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        s.<span class="built_in">insert</span>(i);</span><br><span class="line">        <span class="built_in">insert</span>(rt[i], <span class="number">1</span>, n, a[i]);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        -- op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">split</span>(l - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">split</span>(r);</span><br><span class="line">            Info k = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">            cout &lt;&lt; <span class="built_in">max</span>(&#123;k.f[<span class="number">0</span>][<span class="number">0</span>], k.f[<span class="number">0</span>][<span class="number">1</span>], k.f[<span class="number">1</span>][<span class="number">0</span>], k.f[<span class="number">1</span>][<span class="number">1</span>]&#125;) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Sort</span>(l, r, op);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022牛客多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 261个人题解</title>
      <link href="/2022/08/01/AtCoder-Beginner-Contest-261%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/08/01/AtCoder-Beginner-Contest-261%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>A - Intersection</h1><h2 id="题意-3">题意</h2><p>给出两条线段，求交集长度</p><h2 id="题解">题解</h2><p>暴力</p><h2 id="代码-15">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">    cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">a</span><span class="params">(<span class="number">101</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l1; i &lt;= r1; ++ i) &#123;</span><br><span class="line">        a[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l2; i &lt;= r2; ++ i) &#123;</span><br><span class="line">        ans += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans) -- ans;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>B - Tournament Result</h1><h2 id="题意-4">题意</h2><p>一个二维矩阵，$A_{i,j}$为<code>W</code>则$i$击败$j$，为<code>L</code>则$i$败给$j$，为<code>D</code>则$i$和$j$打成平局</p><p>求是否冲突</p><blockquote><p>The table is said to be contradictory when some of the following holds:</p><ul><li>There is a pair (<em>i</em>,<em>j</em>) such that Player <em>i</em> beat Player <em>j</em>, but Player <em>j</em> did not lose to Player <em>i</em>;</li><li>There is a pair (<em>i</em>,<em>j</em>) such that Player <em>i</em> lost to Player <em>j</em>, but Player <em>j</em> did not beat Player <em>i</em>;</li><li>There is a pair (<em>i</em>,<em>j</em>) such that Player <em>i</em> drew with Player <em>j</em>, but Player <em>j</em> did not draw with Player <em>i</em>.</li></ul></blockquote><h2 id="题解-2">题解</h2><p>模拟</p><h2 id="代码-16">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1005</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s[N];</span><br><span class="line"><span class="type">int</span> dis[N][N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> safe = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;D&#x27;</span> &amp;&amp; s[j][i] != <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">                safe = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;W&#x27;</span> &amp;&amp; s[j][i] != <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                safe = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; s[j][i] != <span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">                safe = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (safe ? <span class="string">&quot;correct&quot;</span> : <span class="string">&quot;incorrect&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>C - NewFolder(1)</h1><h2 id="题意-5">题意</h2><p>给出<code>n</code>个字符串，要求以 $s_i+(\sum_{j=1}^{i-1}s_j==s[i])$ 的形式输出 <code>n</code> 个字符串</p><h2 id="题解-3">题解</h2><p>模拟</p><h2 id="代码-17">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt; string, <span class="type">int</span> &gt; cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[s[i]]) &#123;</span><br><span class="line">            cout &lt;&lt; s[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; s[i] + <span class="string">&#x27;(&#x27;</span> + <span class="built_in">to_string</span>(cnt[s[i]]) + <span class="string">&#x27;)&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ cnt[s[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>D - Flipping and Bonus</h1><h2 id="题意-6">题意</h2><p><code>Takahashi</code>会投掷$n$次硬币，若第$i$次硬币为正面，则他会获得$X_i$元的奖励，同时给出$m$个附加奖励，当他每次连续投掷正面的次数为$C_i$时他会额外获得$Y_i$元的奖励，求<code>Takahashi</code>能获得的最大钱数。</p><h2 id="题解-4">题解</h2><p>我们定义$dp_{i,j}$为投掷第$i$次硬币后，连续正面次数为$j$的最大收益</p><ul><li><p>若第$i$次投掷的是正面</p><p>$dp_{i,j}=dp_{i-1,j-1}+X_i$</p></li><li><p>若第$i$次投掷的是反面，那么连续正面次数重置为<code>0</code></p><p>$dp_{i,0}=\max(dp_{i,0},dp_{i-1,j})$</p></li><li><p>接下来考虑额外奖励</p><p>$dp_{i,C_j}=\max\left( dp_{i,C_j},dp_{i-1,C_j-1+Y_j+X_i} \right)$</p></li></ul><h2 id="代码-18">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5005</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, x[N], c[N], y[N];</span><br><span class="line">LL dp[N][N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; c[i] &gt;&gt; y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; ++ j) &#123;</span><br><span class="line">            dp[i][j + <span class="number">1</span>] = dp[i - <span class="number">1</span>][j] + x[i];</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i][<span class="number">0</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[j] &lt;= i) &#123;</span><br><span class="line">                dp[i][c[j]] = <span class="built_in">max</span>(dp[i][c[j]], dp[i - <span class="number">1</span>][c[j] - <span class="number">1</span>] + y[j] + x[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; ++ j) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>E - Many Operations</h1><h2 id="题意-7">题意</h2><p>我们有一个初值$X$，以及$n$个操作$op, A_i$</p><ul><li>若$op=1$ ，则令 $X= X$ &amp; $A_i$</li><li>若$op=2$ ，则令 $X=X|A_i$</li><li>若$op=3$ ，则令 $X=X\bigoplus A_i$</li></ul><p>我们令初值$X$进行了前$i$次操作后的值为$Y_i$，输出$Y_i(1 \leq i \leq n)$</p><h2 id="题解-5">题解</h2><p>初一看，感觉是个很厉害的题，细想后发现可以对每一位分别考虑。</p><p>分别计算初始值每一位为$0$ 或 $1$，进行$i$次运算后的值，第$i$ 次的初始值为 $Y_{i-1}$ ，对 $Y_{i-1}$的每一位统计即可</p><h2 id="代码-19">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, C;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; C;</span><br><span class="line">    <span class="type">int</span> X = (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) - <span class="number">1</span>, Y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> op, x;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            X &amp;= x;</span><br><span class="line">            Y &amp;= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            X |= x;</span><br><span class="line">            Y |= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            X ^= x;</span><br><span class="line">            Y ^= x;</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; ++ j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (C &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                ans |= (X &gt;&gt; j &amp; <span class="number">1</span>) &lt;&lt; j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans |= (Y &gt;&gt; j &amp; <span class="number">1</span>) &lt;&lt; j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (C = ans) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>F - Sorting Color Balls</h1><h2 id="题意-8">题意</h2><p>给定$n$个元素，每个元素有一个值和一个颜色，每次操作可以交换相邻的两个元素，若这两个元素颜色不同，则需要消耗一点$cost$,询问通过操作将这$n$个元素按非递减排列所需要的最小$cost$</p><h2 id="题解-6">题解</h2><p>首先不考虑颜色，其代价显然是数组的逆序对个数</p><p>现在加上颜色的限制，其代价就是总的逆序对个数减去同种颜色之间逆序对的个数，维护这个即可。</p><p>这里我用了非树状数组的方法来求同种颜色之间逆序对的个数，从后往前遍历，我们每次把$X_i$顺序插入$C_i$对应的数组，询问时我们查询当前的$X_i$位于$C_i$对应的数组第几个即可，$j&gt;i$且$X_j&lt;X_i$符合逆序对定义嘛</p><h2 id="代码-20">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, c[N], x[N];</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; col[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FenWick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; c;</span><br><span class="line">    <span class="built_in">FenWick</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">c</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            c[i] += d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(l, d);</span><br><span class="line">        <span class="built_in">add</span>(r + <span class="number">1</span>, -d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i; i -= i &amp; -i) &#123;</span><br><span class="line">            sum += c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get</span>(r) - <span class="built_in">get</span>(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function">FenWick <span class="title">k</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; -- i) &#123;</span><br><span class="line">        ans += k.<span class="built_in">get</span>(x[i] - <span class="number">1</span>);</span><br><span class="line">        k.<span class="built_in">add</span>(x[i], <span class="number">1</span>);</span><br><span class="line">        ans -= <span class="built_in">upper_bound</span>(col[c[i]].<span class="built_in">begin</span>(), col[c[i]].<span class="built_in">end</span>(), x[i] - <span class="number">1</span>) - col[c[i]].<span class="built_in">begin</span>();</span><br><span class="line">        col[c[i]].<span class="built_in">insert</span>(<span class="built_in">upper_bound</span>(<span class="built_in">begin</span>(col[c[i]]), <span class="built_in">end</span>(col[c[i]]), x[i]), x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> atcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 262个人题解</title>
      <link href="/2022/07/31/AtCoder-Beginner-Contest-262%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/07/31/AtCoder-Beginner-Contest-262%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>A - World Cup</h1><h2 id="题意-9">题意</h2><p>给你一个数$x$，询问下一个$ \mod 4 \equiv 2$的数是多少</p><h2 id="题解-7">题解</h2><p>直接模拟即可</p><h2 id="代码-21">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n % <span class="number">4</span> != <span class="number">2</span>) ++ n;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>B - Triangle (Easier)</h1><h2 id="题意-10">题意</h2><p>给你一张$n$个点，$m$条边的无向图，询问形如$a &lt; b &lt; c$且$a,b,c$之间都有连边的$(a,b,c)$三元组个数</p><h2 id="题解-8">题解</h2><p>注意到$n \leq 100$，直接暴力枚举即可</p><h2 id="代码-22">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt; vector&lt; <span class="type">int</span> &gt; &gt; <span class="built_in">d</span>(<span class="number">105</span>, <span class="built_in">vector</span>&lt; <span class="type">int</span> &gt; (<span class="number">105</span>));</span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        d[u][v] = d[v][u] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++ j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>; k &lt;= n; ++ k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[i][j] &amp;&amp; d[j][k] &amp;&amp; d[i][k]) &#123;</span><br><span class="line">                    ++ ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>C - Min Max Pair</h1><h2 id="题意-11">题意</h2><p>一个长度为$n$的序列，且$1 \leq a_i \leq n(1 \leq i \leq n)$</p><p>求出满足$i &lt; j$且$\min (a_i,a_j)=i, \max (a_i,a_j)=j$的二元组$(i,j)$个数</p><h2 id="题解-9">题解</h2><p>我们对每一个$a_i$进行枚举</p><ul><li><p>首先分析$a_i=i$的情况</p><p>答案即为$a_j=j(i+1 \leq j \leq n)$的个数</p></li><li><p>再来分析$a_i \neq i$的情况</p><p>答案即为$a_i=j$且$a_j=i$的个数</p></li></ul><p>最后将答案加起来即可</p><h2 id="代码-23">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">cnt</span><span class="params">(n)</span>, <span class="title">suf</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        -- a[i];</span><br><span class="line">        ++ cnt[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">    suf[n - <span class="number">1</span>] = a[n - <span class="number">1</span>] == n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        suf[i] = suf[i + <span class="number">1</span>] + (a[i] == i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == i &amp;&amp; i + <span class="number">1</span> &lt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">            ans1 += suf[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != i) &#123;</span><br><span class="line">            ans2 += a[a[i]] == i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans1 + ans2 / <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>D - I Hate Non-integer Number</h1><h2 id="题意-12">题意</h2><p>给你一个长度为$n$的序列，你可以在其中选任意正整数个数，求选出的数的平均数为偶数的个数</p><h2 id="题解-10">题解</h2><blockquote><p>这题一眼$dp$，但是奈何我脑子笨一直没调对，好在最后半小时调出来了，太菜了555</p></blockquote><p>我们定义$ans_i$为选$i$个数，其平均数为偶数的个数</p><p>我们定义$dp[t][i][j][k]$代表选$t$个数的方案中前$i$个数选$j$个数，它们的和$\mod t \equiv k$的方案数</p><p>注意到$ans_i,ans_j(i \neq j)$之间没有任何关联，所以$dp$数组的第一维可以优化掉</p><p>状态转移方程也是十分显然</p><p>$dp[i][j][k]=dp[i-1][j][k]+dp[i-1][j-1][(k-a[i])\mod t+t)\mod t]$</p><h2 id="代码-24">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">LL dp[<span class="number">102</span>][<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">1</span>; p &lt;= n; ++ p) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; ++ j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; p; ++ k) &#123;</span><br><span class="line">                    <span class="type">int</span> kk = ((k - a[i]) % p + p) % p;</span><br><span class="line">                    dp[i][j][k] += dp[i - <span class="number">1</span>][j - <span class="number">1</span>][kk];</span><br><span class="line">                    dp[i][j][k] %= MOD;</span><br><span class="line">                    dp[i][j][k] += dp[i - <span class="number">1</span>][j][k];</span><br><span class="line">                    dp[i][j][k] %= MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans + dp[n][p][<span class="number">0</span>]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>E - Red and Blue Graph</h1><h2 id="题意-13">题意</h2><p>给你$n$个点，$m$条边的无向图，并且你可以将其中的$k$个点标记为红色，其余的标记为蓝色，求两端为不同颜色的边的个数为偶数的方案数</p><h2 id="题解-11">题解</h2><blockquote><p>这题真是你敢猜，就能对</p></blockquote><p>首先我们注意到答案跟节点的编号没有关系，我们从节点的度数出发，当相邻的节点涂同一个颜色时，它对答案的奇偶性不会发生影响，度数为偶数的节点涂成红色会产生偶数条边，度数为基数的节点涂成红色会产生奇数条边。这个结论可以画几个图验证一下，所以现在的问题是保证选择的节点中，度数为奇数的点的个数为偶数，度数为偶数的点随意，原问题转化为排列组合问题。</p><p>$ans = \sum \binom {x}{cnt_1} \times \binom{k-x}{cnt_0}$ 其中$x % \equiv 0$</p><h2 id="代码-25">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, MOD = <span class="number">998244353</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// assume -P &lt;= x &lt; 2P</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">norm</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x += P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= P) &#123;</span><br><span class="line">        x -= P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">power</span><span class="params">(T a, i64 b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Z</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Z</span>(<span class="type">int</span> x = <span class="number">0</span>) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x)) &#123;&#125;</span><br><span class="line">    <span class="built_in">Z</span>(i64 x) : <span class="built_in">x</span>(<span class="built_in">norm</span>(x % P)) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    Z <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Z</span>(<span class="built_in">norm</span>(P - x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, P - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">i64</span>(x) * rhs.x % P;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Z &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>*(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>+(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>-(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>/(<span class="type">const</span> Z &amp;lhs, <span class="type">const</span> Z &amp;rhs) &#123;</span><br><span class="line">        Z res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;is, Z &amp;a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">Z</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> Z &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line">Z inv[N], fac[N], finv[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pre_Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; ++ i) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        inv[i] = MOD - MOD / i * inv[MOD % i];</span><br><span class="line">        finv[i] = finv[i - <span class="number">1</span>] * inv[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Z <span class="title">C</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[x] * finv[x - y] * finv[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre_Work</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        ++ deg[v];</span><br><span class="line">        ++ deg[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt; <span class="type">int</span> &gt; <span class="title">cnt</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        ++ cnt[deg[i] &amp; <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Z ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i += <span class="number">2</span>) &#123;</span><br><span class="line">            ans += <span class="built_in">C</span>(cnt[<span class="number">0</span>], i) * <span class="built_in">C</span>(cnt[<span class="number">1</span>], k - i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i += <span class="number">2</span>) &#123;</span><br><span class="line">            ans += <span class="built_in">C</span>(cnt[<span class="number">0</span>], i) * <span class="built_in">C</span>(cnt[<span class="number">1</span>], k - i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面几题再补。。。</p>]]></content>
      
      
      <categories>
          
          <category> atcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Continental Cowngress G(2-sat)</title>
      <link href="/2022/07/31/The-Continental-Cowngress-G-2-sat/"/>
      <url>/2022/07/31/The-Continental-Cowngress-G-2-sat/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.com.cn/problem/P3007"> The Continental Cowngress G</a></p><blockquote><p>简述 :<br>给出 $n$ 个法案， $m$ 头牛的意见， 每头牛会表决两次。<br>每次表决格式为 <code>i Y</code> 表示“支持 $i$ 号法案”或 <code>i N</code> 表示“反对 $i$ 号法案”。<br>最终，每头牛至少要有一个表决被满足。不可能成立的话输出 <code>IMPOSSIBLE</code>，否则输出方案。</p></blockquote><p>由于对 Farmer John 的领导感到极其不悦，奶牛们退出了农场，组建了奶牛议会。</p><p>议会以“每头牛都可以获得自己想要的”为原则，建立了下面的投票系统： $M$只到场的奶牛 ( $1\le M\le 4000$ ) 会给 $N$ 个议案投票 ( $1\le N\le 1,000$ ) 。每只奶牛会对恰好两个议案 $B_i$ 与 $C_i$ ( $1\le B_i \le N$ ; $1 \le C_i \le N$ ) 投出“是”或“否”（输入文件中的 <code>Y</code> 和 <code>N</code> ）。</p><p>他们的投票结果分别为 $V_{B_i}$ ( $V_{B_i} \in { \texttt{Y}, \texttt{N}})$ 与 $V_{C_i} (V_{C_i} \in {\texttt{Y}, \texttt{N}})$。 最后，法案会以如下的方式决定：每只奶牛投出的两票中至少有一票和最终结果相符合。 例如 Bessie 给法案 $1$ 投了赞成 <code>Y</code>，给法案 $2$ 投了反对 <code>N</code>，那么在任何合法的法案通过方案中，必须满足法案 $1$ 必须是 <code>Y</code>或者议案 $2$ 必须是 <code>N</code>（或者同时满足）。</p><p>你的工作是确定哪些法案可以通过，哪些不能。</p><p>如果不存在这样一个方案， 输出 <code>IMPOSSIBLE</code>。</p><p>如果至少有一个解，对于每个法案输出：</p><ul><li><code>Y</code> 如果在每个解中，这个法案都必须通过。</li><li><code>N</code> 如果在每个解中，这个法案都必须驳回。</li><li><code>?</code> 如果有的解这个法案可以通过，有的解中这个法案会被驳回。</li></ul><h4 id="思路-每头牛都有两个表决且至少有一个表决被同意-满足二分图-建立2-sat模型-然后对于每个表决的两种情况都dfs一遍-若x与-x都存在-那么就说明无解">思路 : 每头牛都有两个表决且至少有一个表决被同意, 满足二分图, 建立2-sat模型. 然后对于每个表决的两种情况都dfs一遍, 若<code>x</code>与<code>!x</code>都存在, 那么就说明无解.</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(3,&quot;Ofast&quot;,&quot;inline&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (x &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (x &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zty(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">2005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_M = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> head[MAX_N], tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123; <span class="type">int</span> to, next;&#125; G[MAX_M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[++ tot] = node&#123;v, head[u]&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[MAX_N], low[MAX_N], col[MAX_N], cnt, num;</span><br><span class="line">stack&lt; <span class="type">int</span> &gt; st;</span><br><span class="line"><span class="type">bool</span> vis[MAX_N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    dfn[x] = low[x] = ++ num;</span><br><span class="line">    st.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[x]; i; i = G[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> y = G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!col[y]) &#123;</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x] == low[x]) &#123;</span><br><span class="line">        col[x] = ++ cnt;</span><br><span class="line">        <span class="keyword">while</span>(st.<span class="built_in">top</span>() != x) &#123;</span><br><span class="line">            col[st.<span class="built_in">top</span>()] = cnt;</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[x]; i; i = G[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> y = G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!vis[y]) <span class="built_in">dfs</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">dfs</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] &amp;&amp; vis[i + n]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="comment">// i means support and i + n means reject.....</span></span><br><span class="line">    <span class="keyword">while</span>(m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        string op1, op2;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; op1 &gt;&gt; b &gt;&gt; op2;</span><br><span class="line">        <span class="keyword">if</span>(op1 == <span class="string">&quot;Y&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(op2 == <span class="string">&quot;Y&quot;</span>) &#123;</span><br><span class="line">                <span class="built_in">add</span>(b + n, a); <span class="built_in">add</span>(a + n, b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">add</span>(b, a); <span class="built_in">add</span>(a + n, b + n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(op2 == <span class="string">&quot;Y&quot;</span>) &#123;</span><br><span class="line">                <span class="built_in">add</span>(b + n, a + n); <span class="built_in">add</span>(a, b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">add</span>(b, a + n); <span class="built_in">add</span>(a, b + n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(col[i] == col[i + n]) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="type">bool</span> f1 = <span class="built_in">check</span>(i), f2 = <span class="built_in">check</span>(i + n);</span><br><span class="line">        <span class="keyword">if</span>(f1 &amp;&amp; f2) ret += <span class="string">&quot;?&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(f1 &amp;&amp; !f2) ret += <span class="string">&quot;Y&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!f1 &amp;&amp; f2) ret += <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ret &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.IN&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.OUT&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> ZTY = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; ZTY;</span></span><br><span class="line">    <span class="keyword">while</span>(ZTY -- ) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粟粟的书架(主席树+前缀和)</title>
      <link href="/2022/07/31/%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2022/07/31/%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>题目链接<a href="https://www.luogu.com.cn/problem/P2468">粟粟的书架</a><br><strong>题目大意</strong>: 给你一个$n \times m$的矩阵, $q$个询问, 每次给你一个左上角在$(x1,y1)$,右下角在$(x2,y2)$的子矩阵, 和一个权值$h$, 要求在子矩阵中选出最少的数,使得这些数的和不小于$h$.<br><strong>思路</strong>:<br>注意到题目数据有$50 %$是${n \leq 200, n \leq 200, q \leq<br>2 \times 10^5}$, 这样我们可以对这$50%$的数据进行前缀和暴力预处理, 设$cnt_k[i][j][k]$为$(1,1) 到 (i,j)$这个子矩阵中$\geq k$的个数, $sum_k[i][j][k]为(1,1) 到(i,j)$这个子矩阵中$\geq k$的元素和.这样我们就可以二分$k$,来进行求解.<br>另外$50%$的数据是${n=1, m \leq 5 \times 10^5 , q \leq 2 \times 10^4}$, 那么就变成了区间$(y1,y2)$内找出最少的数使其和不小于$h$, 我们可以用主席树来求解, 并二分$k$使区间内大于等于$k$的元素和不小于$h$.<br>注意, 这里二分过程中求解的次数并非最小次数, 还需要将多余的$\lceil \frac{h}{k} \rceil$向上取整转化为次数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (x &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (x &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zty(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_M = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PresidentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> rt[MAX_N], tot;</span><br><span class="line">    <span class="type">int</span> sum[MAX_N * <span class="number">32</span>], cnt[MAX_N * <span class="number">32</span>], ls[MAX_N * <span class="number">32</span>], rs[MAX_N * <span class="number">32</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = ++ tot;</span><br><span class="line">        sum[x] = sum[p] + val;</span><br><span class="line">        cnt[x] = cnt[p] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(val &lt;= mid) ls[x] = <span class="built_in">update</span>(ls[p], l, mid, val), rs[x] = rs[p];</span><br><span class="line">        <span class="keyword">else</span> rs[x] = <span class="built_in">update</span>(rs[p], mid + <span class="number">1</span>, r, val), ls[x] = ls[p];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> (limit + l - <span class="number">1</span>) / l;</span><br><span class="line">        <span class="type">int</span> rcnt = cnt[rs[p]] - cnt[rs[q]];</span><br><span class="line">        <span class="type">int</span> rsum = sum[rs[p]] - sum[rs[q]];</span><br><span class="line">        <span class="keyword">if</span>(rsum &gt;= limit) <span class="keyword">return</span> <span class="built_in">query</span>(rs[p], rs[q], mid + <span class="number">1</span>, r, limit);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(ls[p], ls[q], l, mid, limit - rsum) + rcnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; PT;</span><br><span class="line"><span class="type">int</span> a[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="type">int</span> sum_k[<span class="number">205</span>][<span class="number">205</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> cnt_k[<span class="number">205</span>][<span class="number">205</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            PT.rt[i] = PT.<span class="built_in">update</span>(PT.rt[i - <span class="number">1</span>], <span class="number">1</span>, <span class="number">1000</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q -- ) &#123;</span><br><span class="line">            <span class="type">int</span> x1, y1, x2, y2, h;</span><br><span class="line">            cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; h;</span><br><span class="line">            <span class="keyword">if</span>(PT.sum[PT.rt[y2]] - PT.sum[PT.rt[y1 - <span class="number">1</span>]] &lt; h) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Poor QLW&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; PT.<span class="built_in">query</span>(PT.rt[y2], PT.rt[y1 - <span class="number">1</span>], <span class="number">1</span>, <span class="number">1000</span>, h) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j) cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">1000</span>; ++ k) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j) &#123;</span><br><span class="line">                    sum_k[i][j][k] = sum_k[i - <span class="number">1</span>][j][k] + sum_k[i][j - <span class="number">1</span>][k] - sum_k[i - <span class="number">1</span>][j - <span class="number">1</span>][k] + (a[i][j] &gt;= k ? a[i][j] : <span class="number">0</span>);</span><br><span class="line">                    cnt_k[i][j][k] = cnt_k[i - <span class="number">1</span>][j][k] + cnt_k[i][j - <span class="number">1</span>][k] - cnt_k[i - <span class="number">1</span>][j - <span class="number">1</span>][k] + (a[i][j] &gt;= k ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> Get_sum = [&amp;](<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="keyword">return</span> sum_k[x2][y2][k] - sum_k[x1 - <span class="number">1</span>][y2][k] - sum_k[x2][y1 - <span class="number">1</span>][k] + sum_k[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>][k];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> Get_cnt = [&amp;](<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt_k[x2][y2][k] - cnt_k[x1 - <span class="number">1</span>][y2][k] - cnt_k[x2][y1 - <span class="number">1</span>][k] + cnt_k[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>][k];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span>(q -- ) &#123;</span><br><span class="line">            <span class="type">int</span> x1, y1, x2, y2, h;</span><br><span class="line">            cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; h;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Get_sum</span>(x1, y1, x2, y2, <span class="number">1</span>) &lt; h) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Poor QLW&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1000</span>, ret = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">Get_sum</span>(x1, y1, x2, y2, mid) &gt;= h) &#123;</span><br><span class="line">                        ret = mid;</span><br><span class="line">                        l = mid + <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        r = mid - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; <span class="built_in">Get_cnt</span>(x1, y1, x2, y2, ret) - (<span class="built_in">Get_sum</span>(x1, y1, x2, y2, ret) - h) / ret &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.IN&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.OUT&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> ZTY = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; ZTY;</span></span><br><span class="line">    <span class="keyword">while</span>(ZTY -- ) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3302 [SDOI2013]森林(主席树+启发式合并)</title>
      <link href="/2022/07/31/P3302-SDOI2013-%E6%A3%AE%E6%9E%97-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>/2022/07/31/P3302-SDOI2013-%E6%A3%AE%E6%9E%97-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p>小 Z 有一片森林，含有 <code>N</code> 个节点，每个节点上都有一个非负整数作为权值。初始的时候，森林中有 <code>M</code> 条边。</p><p>小Z希望执行 <code>T</code> 个操作，操作有两类：</p><p><code>Q x y k</code> 查询点 <code>x</code> 到点 <code>y</code> 路径上所有的权值中，第 <code>k</code> 小的权值是多少。此操作保证点 <code>x</code> 和点 <code>y</code> 连通，同时这两个节点的路径上至少有 <code>k</code> 个点。<br><code>L x y</code> 在点 <code>x</code> 和点 <code>y</code> 之间连接一条边。保证完成此操作后，仍然是一片森林。<br>为了体现程序的在线性，我们把输入数据进行了加密。设 <code>lastans</code> 为程序上一次输出的结果，初始的时候 <code>lastans</code> 为 <code>0</code>。</p><p>对于一个输入的操作 <code>Q x y k</code>，其真实操作为 <code>Q x^lastans </code> <code>y^lastans </code> <code>k^lastans</code>。</p><p>对于一个输入的操作<code> L x y</code>，其真实操作为 <code>L x^lastans</code> <code> y^lastans</code>。其中 <code>^</code> 运算符表示异或，等价于 <code>Pascal</code> 中的 <code>xor</code> 运算符。</p><p>请写一个程序来帮助小 Z 完成这些操作。<br><strong>思路</strong>:<br>树上节点第<code>k</code>小, 我们很容易想到主席树, 但是操作<code>2</code>却有连边操作, 这时候我们可以考虑按树的秩的大小来合并两棵树, 并重新维护被合并的树上的主席树.<br>tips: 不同于一段序列上的<code>kth</code>查询, 树上<code>kth</code>查询需要求出两节点的<code>lca</code>, 以及<code>lca</code>的<code>father</code>, 类似于树上点差分.<br>这题空间得开很大, 因为每次合并两棵树都相当于重构一颗主席树.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(3,&quot;Ofast&quot;,&quot;inline&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc (x &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc (x &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zty(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">8e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> test;</span><br><span class="line"><span class="type">int</span> n, m, q, t;</span><br><span class="line"><span class="type">int</span> head[MAX_N], tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123; <span class="type">int</span> to, next;&#125; G[MAX_M * <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[MAX_N], b[MAX_N], sum;</span><br><span class="line"><span class="type">int</span> fa[MAX_N][<span class="number">20</span>], siz[MAX_N], dep[MAX_N], root[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    G[++ tot] = node&#123;v, head[u]&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">President_Tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> root[MAX_N * <span class="number">150</span>], tot;</span><br><span class="line">    <span class="type">int</span> cnt[MAX_N * <span class="number">150</span>], son[MAX_N * <span class="number">150</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = ++ tot;</span><br><span class="line">        cnt[x] = cnt[pre] + <span class="number">1</span>;</span><br><span class="line">        son[x][<span class="number">0</span>] = son[pre][<span class="number">0</span>];</span><br><span class="line">        son[x][<span class="number">1</span>] = son[pre][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt;= mid) son[x][<span class="number">0</span>] = <span class="built_in">insert</span>(son[pre][<span class="number">0</span>], l, mid, pos);</span><br><span class="line">        <span class="keyword">else</span> son[x][<span class="number">1</span>] = <span class="built_in">insert</span>(son[pre][<span class="number">1</span>], mid + <span class="number">1</span>, r, pos);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> ff, <span class="type">int</span> fff, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> lcnt = cnt[son[x][<span class="number">0</span>]] + cnt[son[y][<span class="number">0</span>]] - cnt[son[ff][<span class="number">0</span>]] - cnt[son[fff][<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> b[l];</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= lcnt) <span class="keyword">return</span> <span class="built_in">query</span>(son[x][<span class="number">0</span>], son[y][<span class="number">0</span>], son[ff][<span class="number">0</span>], son[fff][<span class="number">0</span>], l, mid, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(son[x][<span class="number">1</span>], son[y][<span class="number">1</span>], son[ff][<span class="number">1</span>], son[fff][<span class="number">1</span>], mid + <span class="number">1</span>, r, k - lcnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pt;</span><br><span class="line">bitset&lt; MAX_N &gt; vis;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> fat, <span class="type">int</span> boss)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="literal">true</span>;</span><br><span class="line">    fa[x][<span class="number">0</span>] = fat;</span><br><span class="line">    dep[x] = dep[fat] + <span class="number">1</span>;</span><br><span class="line">    root[x] = boss;</span><br><span class="line">    ++ siz[boss];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; ++ i) fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    pt.root[x] = pt.<span class="built_in">insert</span>(pt.root[fat], <span class="number">1</span>, sum, a[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[x]; i; i = G[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> y = G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(y != fat) <span class="built_in">dfs</span>(y, x, boss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = t; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[fa[y][i]] &gt;= dep[x]) y = fa[y][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = t; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i] != fa[y][i]) &#123;</span><br><span class="line">            x = fa[x][i]; y = fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; test;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    t = (<span class="type">int</span>)(<span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        root[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(b, a, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    sum = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + sum + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    <span class="keyword">while</span>(m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">add</span>(x, y); <span class="built_in">add</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">            root[i] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(i, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q -- ) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> x, y, k;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        x ^= lastans;</span><br><span class="line">        y ^= lastans;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&quot;Q&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            k ^= lastans;</span><br><span class="line">            <span class="type">int</span> ff = <span class="built_in">lca</span>(x, y);</span><br><span class="line">            <span class="type">int</span> ret = pt.<span class="built_in">query</span>(pt.root[x], pt.root[y], pt.root[ff], pt.root[fa[ff][<span class="number">0</span>]], <span class="number">1</span>, sum, k);</span><br><span class="line">            lastans = ret;</span><br><span class="line">            cout &lt;&lt; ret &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">add</span>(x, y); <span class="built_in">add</span>(y, x);</span><br><span class="line">            <span class="type">int</span> rtx = root[x], rty = root[y];</span><br><span class="line">            <span class="keyword">if</span>(siz[rtx] &lt; siz[rty]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(x, y);</span><br><span class="line">                <span class="built_in">swap</span>(rtx, rty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs</span>(y, x, rtx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.IN&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//    freopen(&quot;SPO.OUT&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> ZTY = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; ZTY;</span></span><br><span class="line">    <span class="keyword">while</span>(ZTY -- ) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家园 / 星际转移问题(洛谷P2754 分层图+最大流)</title>
      <link href="/2022/07/31/%E5%AE%B6%E5%9B%AD-%E6%98%9F%E9%99%85%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98-%E6%B4%9B%E8%B0%B7P2754-%E5%88%86%E5%B1%82%E5%9B%BE-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2022/07/31/%E5%AE%B6%E5%9B%AD-%E6%98%9F%E9%99%85%E8%BD%AC%E7%A7%BB%E9%97%AE%E9%A2%98-%E6%B4%9B%E8%B0%B7P2754-%E5%88%86%E5%B1%82%E5%9B%BE-%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><strong>再一次感觉网络流太神奇了qwq</strong></p><p>题目链接:[星际转移问题](<a href="https://www.luogu.com.cn/problem/P4009">P4009 汽车加油行驶问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>)</p><p>受到之前那道[汽车加油行驶问题](<a href="https://www.luogu.com.cn/problem/P4009">P4009 汽车加油行驶问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>)按汽油剩余量建图的启发,这题自然而然的就想到了按时间建图,但是怎么按时间建图又成了一个难点.</p><p>首先判断是否有解,地球与月亮联通时必定有解. 这一步可以用<strong>并查集</strong>来判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DSU <span class="title">dsu</span><span class="params">(n + <span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s[i]) cin &gt;&gt; x, ++ x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; ++ j) dsu.<span class="built_in">merge</span>(s[i][j], s[i][j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dsu.<span class="built_in">find</span>(<span class="number">0</span>) != dsu.<span class="built_in">find</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于数据范围很小,我们可以枚举时间,然后跑最大流看是否等于总人数$K$</p><p>本题的所有角色编号</p><ul><li><p>源点: $S$</p></li><li><p>汇点: $T$</p></li><li><p>地球: $1$</p></li><li><p>月球: $0$</p></li><li><p>空间站: $0 \backsim n+1$ $($默认地球和月球也是空间站$)$</p></li><li><p>太空船: $n+2 \backsim n+1+m$</p></li></ul><p>所以除开源汇点外,节点个数$cnt$为$n+m+2$,对于时间$T$对应的节点编号为$index+T \times (n+m+2)$</p><p>现在是最重要的建图环节$!!!$ 设现在枚举到时间$T$</p><ul><li><p>源点向$0$时刻的地球连边, $T$时刻的月球连边</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.<span class="built_in">AddEdge</span>(d.S, <span class="number">1</span>, k);</span><br><span class="line">d.<span class="built_in">AddEdge</span>(<span class="number">0</span> + cnt * T, d.T, k);</span><br></pre></td></tr></table></figure></li><li><p>任意时刻,人都有三个选择</p><ol><li><p>太空船 $\rightarrow$空间站</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// j时刻人从空间站到飞船</span></span><br><span class="line">d.<span class="built_in">AddEdge</span>(s[i][now] + j * cnt, i + n + <span class="number">1</span> + j * cnt, cap[i]);</span><br></pre></td></tr></table></figure></li><li><p>空间站$\rightarrow$太空船</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// j时刻人从飞船到空间站</span></span><br><span class="line">d.<span class="built_in">AddEdge</span>(i + n + <span class="number">1</span> + j * cnt, s[i][now] + j * cnt, cap[i]);</span><br></pre></td></tr></table></figure></li><li><p>停留(这个选择是最容易忽视的)太空船或空间站的部分人数从上一时刻到下一时刻不变</p><p>这一点是受到[餐巾计划问题](<a href="https://www.luogu.com.cn/problem/P1251">P1251 餐巾计划问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>)将脏抹布留到明天再洗的启发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= T; ++ j) &#123;</span><br><span class="line">    <span class="type">int</span> now = j % s[i].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (j) &#123;</span><br><span class="line">        <span class="comment">// 空间站上的人停留</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt;= n + <span class="number">1</span>; ++ p) &#123;</span><br><span class="line">            d.<span class="built_in">AddEdge</span>(p + (j - <span class="number">1</span>) * cnt, p + j * cnt, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 飞船上的人停留</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = n + <span class="number">2</span>; p &lt;= n + <span class="number">1</span> + m; ++ p) &#123;</span><br><span class="line">            d.<span class="built_in">AddEdge</span>(p + (j - <span class="number">1</span>) * cnt, p + j * cnt, cap[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>最后判断最大流是否等于$K$结束枚举</p><p>完整代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e4</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, cap, flow;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c, <span class="type">int</span> f) : <span class="built_in">from</span>(u), <span class="built_in">to</span>(v), <span class="built_in">cap</span>(c), <span class="built_in">flow</span>(f) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m, S, T;</span><br><span class="line">    vector&lt; Edge &gt; edges;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; G[N];</span><br><span class="line">    <span class="type">int</span> d[N], cur[N];</span><br><span class="line">    <span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Dinic</span>(<span class="type">int</span> S, <span class="type">int</span> T) : <span class="built_in">S</span>(S), <span class="built_in">T</span>(T) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cap)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(from, to, cap, <span class="number">0</span>));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        m = edges.<span class="built_in">size</span>();</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(m - <span class="number">2</span>);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">        Q.<span class="built_in">push</span>(S);</span><br><span class="line">        d[T] = <span class="number">0</span>;</span><br><span class="line">        vis[S] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = Q.<span class="built_in">front</span>();</span><br><span class="line">            Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">                Edge&amp; e = edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span> (!vis[e.to] &amp;&amp; e.cap &gt; e.flow) &#123;</span><br><span class="line">                    vis[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    d[e.to] = d[x] + <span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[T];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == T || a == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>, f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; i = cur[x]; i &lt; G[x].<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">            Edge&amp; e = edges[G[x][i]];</span><br><span class="line">            <span class="keyword">if</span> (d[x] + <span class="number">1</span> == d[e.to] &amp;&amp; (f = <span class="built_in">DFS</span>(e.to, <span class="built_in">min</span>(a, e.cap - e.flow))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                e.flow += f;</span><br><span class="line">                edges[G[x][i] ^ <span class="number">1</span>].flow -= f;</span><br><span class="line">                flow += f;</span><br><span class="line">                a -= f;</span><br><span class="line">                <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Maxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">BFS</span>()) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="built_in">sizeof</span>(cur));</span><br><span class="line">            flow += <span class="built_in">DFS</span>(S, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; f;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) : <span class="built_in">f</span>(n) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x != y) f[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> cap[<span class="number">25</span>];</span><br><span class="line">vector&lt; <span class="type">int</span> &gt; s[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="function">DSU <span class="title">dsu</span><span class="params">(n + <span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; cap[i];</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        s[i].<span class="built_in">resize</span>(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s[i]) cin &gt;&gt; x, ++ x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; ++ j) dsu.<span class="built_in">merge</span>(s[i][j], s[i][j + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dsu.<span class="built_in">find</span>(<span class="number">0</span>) != dsu.<span class="built_in">find</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> T = <span class="number">1</span>; ; ++ T) &#123;</span><br><span class="line">        <span class="comment">// 0 moon</span></span><br><span class="line">        <span class="comment">// 1 earth</span></span><br><span class="line">        <span class="comment">// 0~n+1 space station</span></span><br><span class="line">        <span class="comment">// n+2~n+1+m space ship</span></span><br><span class="line">        <span class="type">int</span> cnt = n + m + <span class="number">2</span>;</span><br><span class="line">        <span class="function">Dinic <span class="title">d</span><span class="params">(cnt * (T + <span class="number">1</span>) + <span class="number">1</span>, cnt * (T + <span class="number">1</span>) + <span class="number">2</span>)</span></span>;</span><br><span class="line">        d.<span class="built_in">AddEdge</span>(d.S, <span class="number">1</span>, k);</span><br><span class="line">        d.<span class="built_in">AddEdge</span>(<span class="number">0</span> + cnt * T, d.T, k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= T; ++ j) &#123;</span><br><span class="line">                <span class="type">int</span> now = j % s[i].<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                    <span class="comment">// 空间站上的人停留</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt;= n + <span class="number">1</span>; ++ p) &#123;</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(p + (j - <span class="number">1</span>) * cnt, p + j * cnt, INF);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 飞船上的人停留</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> p = n + <span class="number">2</span>; p &lt;= n + <span class="number">1</span> + m; ++ p) &#123;</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(p + (j - <span class="number">1</span>) * cnt, p + j * cnt, cap[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 人从空间站到飞船</span></span><br><span class="line">                d.<span class="built_in">AddEdge</span>(s[i][now] + j * cnt, i + n + <span class="number">1</span> + j * cnt, cap[i]);</span><br><span class="line">                <span class="comment">// 人从飞船到空间站</span></span><br><span class="line">                d.<span class="built_in">AddEdge</span>(i + n + <span class="number">1</span> + j * cnt, s[i][now] + j * cnt, cap[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d.<span class="built_in">Maxflow</span>() == k) &#123;</span><br><span class="line">            cout &lt;&lt; T &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总算是把网络流24题肝完了2333</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汽车加油行驶问题(洛谷P4009 分层图费用流)</title>
      <link href="/2022/07/30/%E6%B1%BD%E8%BD%A6%E5%8A%A0%E6%B2%B9%E8%A1%8C%E9%A9%B6%E9%97%AE%E9%A2%98-%E6%B4%9B%E8%B0%B7P4009-%E5%88%86%E5%B1%82%E5%9B%BE%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
      <url>/2022/07/30/%E6%B1%BD%E8%BD%A6%E5%8A%A0%E6%B2%B9%E8%A1%8C%E9%A9%B6%E9%97%AE%E9%A2%98-%E6%B4%9B%E8%B0%B7P4009-%E5%88%86%E5%B1%82%E5%9B%BE%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>第一次见到分层思想和网络流联系起来的题,浅录一下</p><p>题目链接: <a href="https://www.luogu.com.cn/problem/P4009">P4009 汽车加油行驶问题</a></p><p>该题方法很多,<s>但是网络流应该是最能接受和理解的吧</s> (</p><p>由于汽油的影响,建图变得不那么容易,常规建图又无法将位置和油量结合起来,所以考虑分层建图</p><p><strong>我们定义状态$(i,j,k)$代表走到点$(i,j)$时剩余油量为$k$.</strong></p><ul><li><p>建立源点<code>S</code>和汇点<code>T</code></p><p>$S \Rightarrow (1,1,K)$ 连容量为<code>1</code>,费用为<code>0</code>的边</p><p>因为不确定到达终点时剩余油量的多少</p><p>$(n,n,0 \backsim K) \Rightarrow T$连容量为<code>1</code>,费用为<code>0</code>的边</p></li><li><p>对于已经放置加油站的点</p><p>由于是强制消费(呜呜),所以无论来之前是多少油都得加满</p><p>$(i,j,0 \backsim K-1) \Rightarrow (i,j,K)$连容量为<code>1</code>,费用为<code>A</code>的边</p><p>此时已经为满油状态</p><p>$(i,j,K)$向下一层的$(i-1,j)$以及$(i,j-1)$连容量为<code>1</code>,费用为<code>B</code>的边</p><p>$(i,j,K)$向下一层的$(i+1,j)$以及$(i,j+1)$连容量为<code>1</code>,费用为<code>0</code>的边</p></li><li><p>对于没有放置加油站的点</p><p>首先要明确一个问题,什么时候必须放置加油站,情况只有一个:走到没加油站的位置并且没油了</p><p>$(i,j,0) \Rightarrow (i,j,K)$连容量为<code>1</code>,费用为<code>A+C</code>的边</p><p>$(i,j,1 \backsim K)$向下一层的$(i-1,j)$以及$(i,j-1)$连容量为<code>1</code>,费用为<code>B</code>的边</p><p>$(i,j,1 \backsim K)$向下一层的$(i+1,j)$以及$(i,j+1)$连容量为<code>1</code>,费用为<code>0</code>的边</p></li></ul><p><strong>最大流对应下的最小费用即为所求</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, flow, cost;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> flow, <span class="type">int</span> cost) : <span class="built_in">from</span>(from), <span class="built_in">to</span>(to), <span class="built_in">flow</span>(flow), <span class="built_in">cost</span>(cost) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dinic</span> &#123;</span><br><span class="line">    <span class="type">int</span> S, T, m; </span><br><span class="line">    <span class="type">int</span> d[N], incf[N], pre[N];</span><br><span class="line">    <span class="type">bool</span> vis[N];</span><br><span class="line">    vector&lt; Edge &gt; edges;</span><br><span class="line">    vector&lt; <span class="type">int</span> &gt; G[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Dinic</span>(<span class="type">int</span> S, <span class="type">int</span> T) : <span class="built_in">S</span>(S), <span class="built_in">T</span>(T) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> flow, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(from, to, flow, cost));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(to, from, <span class="number">0</span>, -cost));</span><br><span class="line">        m = edges.<span class="built_in">size</span>();</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(m - <span class="number">2</span>);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">        <span class="built_in">memset</span>(incf, <span class="number">0</span>, <span class="keyword">sizeof</span> incf);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">        Q.<span class="built_in">push</span>(S);</span><br><span class="line">        vis[S] = <span class="literal">true</span>, incf[S] = INF, d[S] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = Q.<span class="built_in">front</span>();</span><br><span class="line">            Q.<span class="built_in">pop</span>();</span><br><span class="line">            vis[x] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">                Edge &amp;e = edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span> (d[x] + e.cost &lt; d[e.to] &amp;&amp; e.flow) &#123;</span><br><span class="line">                    d[e.to] = d[x] + e.cost;</span><br><span class="line">                    pre[e.to] = G[x][i];</span><br><span class="line">                    incf[e.to] = <span class="built_in">min</span>(incf[x], e.flow);</span><br><span class="line">                    <span class="keyword">if</span> (!vis[e.to]) &#123;</span><br><span class="line">                        vis[e.to] = <span class="literal">true</span>;</span><br><span class="line">                        Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[T] != INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">pair&lt; <span class="type">int</span>, <span class="type">int</span> &gt; <span class="title">MCMF</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxflow = <span class="number">0</span>, mincost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">SPFA</span>()) &#123;</span><br><span class="line">            maxflow += incf[T];</span><br><span class="line">            mincost += incf[T] * d[T];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = T; i != S; i = edges[pre[i] ^ <span class="number">1</span>].to) &#123;</span><br><span class="line">                edges[pre[i]].flow -= incf[T];</span><br><span class="line">                edges[pre[i] ^ <span class="number">1</span>].flow += incf[T];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;maxflow, mincost&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, K, A, B, C;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; K &gt;&gt; A &gt;&gt; B &gt;&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> get = [&amp;] (<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k) &#123; <span class="keyword">return</span> k * n * n + (i - <span class="number">1</span>) * n + j;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f = [&amp;] (<span class="type">int</span> x, <span class="type">int</span> y) &#123; <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= n;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//0~k层代表i格油</span></span><br><span class="line">    <span class="function">Dinic <span class="title">d</span><span class="params">(<span class="number">0</span>, (K + <span class="number">1</span>) * n * n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    d.<span class="built_in">AddEdge</span>(d.S, <span class="built_in">get</span>(<span class="number">1</span>, <span class="number">1</span>, K), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= K; ++ k) </span><br><span class="line">        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(n, n, k), d.T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, x; j &lt;= n; ++ j) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (x) &#123;</span><br><span class="line">                <span class="comment">// 非满油状态向满油状态连边</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; K; ++ k) </span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i, j, K), <span class="number">1</span>, A);</span><br><span class="line">                <span class="comment">// 满油向下一层相邻点连边</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(i - <span class="number">1</span>, j))</span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, K), <span class="built_in">get</span>(i - <span class="number">1</span>, j, K - <span class="number">1</span>), <span class="number">1</span>, B);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(i, j - <span class="number">1</span>))</span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, K), <span class="built_in">get</span>(i, j - <span class="number">1</span>, K - <span class="number">1</span>), <span class="number">1</span>, B);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(i + <span class="number">1</span>, j))</span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, K), <span class="built_in">get</span>(i + <span class="number">1</span>, j, K - <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(i, j + <span class="number">1</span>))</span><br><span class="line">                    d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, K), <span class="built_in">get</span>(i, j + <span class="number">1</span>, K - <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 向相邻点连边</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = K; k &gt;= <span class="number">1</span>; -- k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(i - <span class="number">1</span>, j))</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i - <span class="number">1</span>, j, k - <span class="number">1</span>), <span class="number">1</span>, B);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(i, j - <span class="number">1</span>))</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i, j - <span class="number">1</span>, k - <span class="number">1</span>), <span class="number">1</span>, B);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(i + <span class="number">1</span>, j))</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i + <span class="number">1</span>, j, k - <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(i, j + <span class="number">1</span>))</span><br><span class="line">                        d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, k), <span class="built_in">get</span>(i, j + <span class="number">1</span>, k - <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// *只有遇到没油且没加油站的时候,才会放置加油站并且加油</span></span><br><span class="line">                d.<span class="built_in">AddEdge</span>(<span class="built_in">get</span>(i, j, <span class="number">0</span>), <span class="built_in">get</span>(i, j, K), <span class="number">1</span>, A + C);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; d.<span class="built_in">MCMF</span>().second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Something About Pikachu</title>
      <link href="/2022/07/30/hello-world/"/>
      <url>/2022/07/30/hello-world/</url>
      
        <content type="html"><![CDATA[<h1>Here are my Accounts</h1><p>codeforces: <a href="https://codeforces.com/profile/_pikaqiu">油</a></p><p>atcoder: <a href="https://atcoder.jp/users/youzhapikaqiu">炸</a></p><p>luogu: <a href="https://www.luogu.com.cn/user/440870">皮</a></p><p>nowcoder: <a href="https://ac.nowcoder.com/acm/contest/profile/319541823">卡</a></p><p>vjudge: <a href="https://vjudge.net/user/ZTYisFIVE">丘</a></p><h1>写给自己的话</h1><p>退役了再来填坑(doge)</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
